//
//     _____   .__         .__ ___.                    .__ scala-miniboxing.org
//    /     \  |__|  ____  |__|\_ |__    ____  ___  ___|__|  ____     ____
//   /  \ /  \ |  | /    \ |  | | __ \  /  _ \ \  \/  /|  | /    \   / ___\
//  /    Y    \|  ||   |  \|  | | \_\ \(  <_> ) >    < |  ||   |  \ / /_/  >
//  \____|__  /|__||___|  /|__| |___  / \____/ /__/\_ \|__||___|  / \___  /
//          \/          \/          \/               \/         \/ /_____/
// Copyright (c) 2012-2014 Scala Team, École polytechnique fédérale de Lausanne
//
// Authors:
//    * Vlad Ureche
//
package miniboxing.plugin
package transform
package commit

import scala.tools.nsc.transform.TypingTransformers
import scala.tools.nsc.Phase

trait PrepareTreeTransformer extends TypingTransformers {
  self: PrepareComponent =>

  import global._
  import definitions.{AnyTpe}

  class PreparePhaseImpl(prev: Phase) extends StdPhase(prev) {
    override def name = PrepareTreeTransformer.this.phaseName
    def apply(unit: CompilationUnit): Unit = {
      val tree = afterPrepare(new PrepareTransformer(unit).transform(unit.body))
      tree.foreach(node => assert(node.tpe != null, node))
      unit.body = tree
    }
  }

  class PrepareTransformer(unit: CompilationUnit) extends TypingTransformer(unit) {
    override def transform(tree: Tree): Tree = tree match {
      case ValDef(_, _, tpt, id @ Ident(_)) =>
        // needs casting to be correct
        // see: https://groups.google.com/forum/#!topic/scala-internals/OICw8rXLyiI
        //      https://issues.scala-lang.org/browse/SI-8820
        //      https://github.com/miniboxing/miniboxing-plugin/issues/123
        val rhSym = id.symbol
        val lhSym = tree.symbol
        val shouldPatch =
          (rhSym != null) &&
          (rhSym != NoSymbol) &&
          rhSym.isCase &&
          (lhSym != null) &&
          (lhSym != NoSymbol) &&
          !lhSym.isCase &&
          (rhSym.tpe =:= AnyTpe) &&
          !(tpt.tpe =:= AnyTpe)

        if (shouldPatch) {
          debuglog(s"Introduced synthetic cast to fix trees generated by the pattern matcher in case ClassTags are in scope: https://groups.google.com/forum/#!topic/scala-internals/OICw8rXLyiI: $tree")
          super.transform(localTyper.typed(deriveValDef(tree)(rhs => localTyper.typed(gen.mkCast(rhs.setType(null), tpt.tpe)))))
        } else
          tree
      case _ =>
        super.transform(tree)
    }
  }
}
