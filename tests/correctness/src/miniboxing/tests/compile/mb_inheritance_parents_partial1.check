Specializing class F1...

  // interface:
  abstract trait F1[T, R] extends AnyRef {
  }

  // specialized class:
  class F1_JJ[Tsp, Rsp] extends F1[Tsp,Rsp] {
    def <init>(val T_TypeTag: Byte,val R_TypeTag: Byte)(): miniboxing.tests.compile.inheritance.F1_JJ[Tsp,Rsp] // is a specialized implementation of constructor F1
    private[this] val R_TypeTag: Byte                                      // no info
    private[this] val T_TypeTag: Byte                                      // no info
  }

  // specialized class:
  class F1_LJ[Tsp, Rsp] extends F1[Tsp,Rsp] {
    def <init>(val R_TypeTag: Byte)(): miniboxing.tests.compile.inheritance.F1_LJ[Tsp,Rsp] // is a specialized implementation of constructor F1
    private[this] val R_TypeTag: Byte                                      // no info
  }

  // specialized class:
  class F1_JL[Tsp, Rsp] extends F1[Tsp,Rsp] {
    def <init>(val T_TypeTag: Byte)(): miniboxing.tests.compile.inheritance.F1_JL[Tsp,Rsp] // is a specialized implementation of constructor F1
    private[this] val T_TypeTag: Byte                                      // no info
  }

  // specialized class:
  class F1_LL[Tsp, Rsp] extends F1[Tsp,Rsp] {
    def <init>()(): miniboxing.tests.compile.inheritance.F1_LL[Tsp,Rsp]    // is a specialized implementation of constructor F1
  }




[[syntax trees at end of                   minibox]] // newSource1.scala
package miniboxing.tests.compile.inheritance {
  abstract trait F1[@miniboxing.plugin.minispec T >: Nothing <: Any, @miniboxing.plugin.minispec R >: Nothing <: Any] extends AnyRef;
  class Predicate[T >: Nothing <: Any] extends miniboxing.tests.compile.inheritance.F1_LJ[T,Boolean] {
    def <init>(): miniboxing.tests.compile.inheritance.Predicate[T] = {
      Predicate.super.<init>(1)();
      ()
    }
  };
  class F1_JJ[Tsp >: Nothing <: Any, Rsp >: Nothing <: Any] extends AnyRef with miniboxing.tests.compile.inheritance.F1[Tsp,Rsp] {
    def <init>(T_TypeTag: Byte, R_TypeTag: Byte)(): miniboxing.tests.compile.inheritance.F1_JJ[Tsp,Rsp] = {
      F1_JJ.super.<init>();
      ()
    };
    <synthetic> <paramaccessor> private[this] val R_TypeTag: Byte = _;
    <synthetic> <paramaccessor> private[this] val T_TypeTag: Byte = _
  };
  class F1_JL[Tsp >: Nothing <: Any, Rsp >: Nothing <: Any] extends AnyRef with miniboxing.tests.compile.inheritance.F1[Tsp,Rsp] {
    def <init>(T_TypeTag: Byte)(): miniboxing.tests.compile.inheritance.F1_JL[Tsp,Rsp] = {
      F1_JL.super.<init>();
      ()
    };
    <synthetic> <paramaccessor> private[this] val T_TypeTag: Byte = _
  };
  class F1_LJ[Tsp >: Nothing <: Any, Rsp >: Nothing <: Any] extends AnyRef with miniboxing.tests.compile.inheritance.F1[Tsp,Rsp] {
    def <init>(R_TypeTag: Byte)(): miniboxing.tests.compile.inheritance.F1_LJ[Tsp,Rsp] = {
      F1_LJ.super.<init>();
      ()
    };
    <synthetic> <paramaccessor> private[this] val R_TypeTag: Byte = _
  };
  class F1_LL[Tsp >: Nothing <: Any, Rsp >: Nothing <: Any] extends AnyRef with miniboxing.tests.compile.inheritance.F1[Tsp,Rsp] {
    def <init>()(): miniboxing.tests.compile.inheritance.F1_LL[Tsp,Rsp] = {
      F1_LL.super.<init>();
      ()
    }
  }
}