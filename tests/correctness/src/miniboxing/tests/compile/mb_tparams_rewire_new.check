Specializing class TN...

  // interface:
  abstract trait TN[T, X] extends Object {
    def foo(): miniboxing.tests.compile.tparams.TN[T,String]
    def foo_J(val T_TypeTag: Byte): miniboxing.tests.compile.tparams.TN[T,String]
    val t(): T
    val t_J(val T_TypeTag: Byte): T @storage
  }

  // specialized class:
  class TN_J[Tsp, Xsp] extends TN[Tsp,Xsp] {
    def <init>(val miniboxing|tests|compile|tparams|TN_J|T_TypeTag: Byte,t: Tsp @storage): miniboxing.tests.compile.tparams.TN_J[Tsp,Xsp] // is a specialized implementation of constructor TN
    def foo(): miniboxing.tests.compile.tparams.TN[Tsp,String]             // is a forwarder to the specialized member
    def foo_J(val T_TypeTag: Byte): miniboxing.tests.compile.tparams.TN[Tsp,String] // is a specialized implementation of method foo
    private[this] val miniboxing|tests|compile|tparams|TN_J|T_TypeTag: Byte // no info
    private[this] val t: Tsp @storage                                      // is a specialized implementation of value t
    val t(): Tsp                                                           // is a forwarder to the specialized member
    val t_J(val T_TypeTag: Byte): Tsp @storage                             // is a setter or getter for value t
  }

  // specialized class:
  class TN_L[Tsp, Xsp] extends TN[Tsp,Xsp] {
    def <init>(t: Tsp): miniboxing.tests.compile.tparams.TN_L[Tsp,Xsp]     // is a specialized implementation of constructor TN
    def foo(): miniboxing.tests.compile.tparams.TN[Tsp,String]             // is a specialized implementation of method foo
    def foo_J(val T_TypeTag: Byte): miniboxing.tests.compile.tparams.TN[Tsp,String] // is a forwarder to the specialized member
    private[this] val t: Tsp                                               // is a specialized implementation of value t
    val t(): Tsp                                                           // is a setter or getter for value t
    val t_J(val T_TypeTag: Byte): Tsp @storage                             // is a forwarder to the specialized member
  }




[Now checking: minibox-dupl]
[Not checkable: minibox-adapt]
[[syntax trees at end of              minibox-spec]] // newSource1.scala
package miniboxing.tests.compile.tparams {
  abstract trait TN[@miniboxed T >: Nothing <: Any, X >: Nothing <: Any] extends Object {
    <stable> <accessor> <paramaccessor> def t(): T;
    def foo(): miniboxing.tests.compile.tparams.TN[T,String];
    def foo_J(T_TypeTag: Byte): miniboxing.tests.compile.tparams.TN[T,String];
    <stable> <accessor> <paramaccessor> def t_J(T_TypeTag: Byte): Long
  };
  object TestNewRewire extends Object {
    def <init>(): miniboxing.tests.compile.tparams.TestNewRewire.type = {
      TestNewRewire.super.<init>();
      ()
    };
    def test[T >: Nothing <: Any](t: T): String = {
      new miniboxing.tests.compile.tparams.TN_J[Int,String](5, MiniboxConversions.this.int2minibox(1));
      new miniboxing.tests.compile.tparams.TN_L[String,String]("xxx");
      new miniboxing.tests.compile.tparams.TN_L[T,String](t);
      new String("yyy")
    }
  };
  class TN_J[Tsp >: Nothing <: Any, Xsp >: Nothing <: Any] extends Object with miniboxing.tests.compile.tparams.TN[Tsp,Xsp] {
    def <init>(miniboxing|tests|compile|tparams|TN_J|T_TypeTag: Byte, t: Long): miniboxing.tests.compile.tparams.TN_J[Tsp,Xsp] = {
      TN_J.super.<init>();
      ()
    };
    def foo(): miniboxing.tests.compile.tparams.TN[Tsp,String] = TN_J.this.foo_J(TN_J.this.miniboxing|tests|compile|tparams|TN_J|T_TypeTag);
    def foo_J(T_TypeTag: Byte): miniboxing.tests.compile.tparams.TN[Tsp,String] = new miniboxing.tests.compile.tparams.TN_J[Tsp,String](T_TypeTag, TN_J.this.t_J(T_TypeTag));
    <paramaccessor> private[this] val miniboxing|tests|compile|tparams|TN_J|T_TypeTag: Byte = _;
    <paramaccessor> private[this] val t: Long = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = MiniboxConversions.this.minibox2box[Tsp](TN_J.this.t_J(TN_J.this.miniboxing|tests|compile|tparams|TN_J|T_TypeTag), TN_J.this.miniboxing|tests|compile|tparams|TN_J|T_TypeTag);
    <stable> <accessor> <paramaccessor> def t_J(T_TypeTag: Byte): Long = TN_J.this.t
  };
  class TN_L[Tsp >: Nothing <: Any, Xsp >: Nothing <: Any] extends Object with miniboxing.tests.compile.tparams.TN[Tsp,Xsp] {
    def <init>(t: Tsp): miniboxing.tests.compile.tparams.TN_L[Tsp,Xsp] = {
      TN_L.super.<init>();
      ()
    };
    def foo(): miniboxing.tests.compile.tparams.TN[Tsp,String] = new miniboxing.tests.compile.tparams.TN_L[Tsp,String](TN_L.this.t());
    def foo_J(T_TypeTag: Byte): miniboxing.tests.compile.tparams.TN[Tsp,String] = TN_L.this.foo();
    <paramaccessor> private[this] val t: Tsp = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = TN_L.this.t;
    <stable> <accessor> <paramaccessor> def t_J(T_TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Tsp](TN_L.this.t(), T_TypeTag)
  }
}

[Now checking: minibox-spec]