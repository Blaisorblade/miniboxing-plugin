Specializing class SpCls2...

  // interface:
  abstract trait SpCls2[S] extends Object {
    def normalizeMe[T](s: S,t: T): T
    def normalizeMe_J[T](val SpCls2_S_TypeTag: Byte,s: Long,t: T): T
    def normalizeMe_J_n_J[T](val normalizeMe_J_T_TypeTag: Byte,val SpCls2_S_TypeTag: Byte,s: Long,t: T): T
    def normalizeMe_n_J[T](val normalizeMe_T_TypeTag: Byte,s: S,t: T): T
  }

  // specialized class:
  class SpCls2_J[Ssp] extends SpCls2[Ssp] {
    def <init>(val SpCls2_S_TypeTag: Byte): miniboxing.tests.correctness.SpCls2_J[Ssp] // is a specialized implementation of constructor SpCls2
    def normalizeMe[T](s: Ssp,t: T): T                                     // is a forwarder to method normalizeMe_J
    def normalizeMe_J[T](val SpCls2_S_TypeTag: Byte,s: Long,t: T): T       // is a specialized implementation of method normalizeMe
    def normalizeMe_J_n_J[T](val normalizeMe_J_T_TypeTag: Byte,val SpCls2_S_TypeTag: Byte,s: Long,t: T): T // is a specialized implementation of method normalizeMe
    def normalizeMe_n_J[T](val normalizeMe_T_TypeTag: Byte,s: Ssp,t: T): T // is a forwarder to method normalizeMe_J
    private[this] val SpCls2_S_TypeTag: Byte                               // no info
  }

  // specialized class:
  class SpCls2_L[Ssp] extends SpCls2[Ssp] {
    def <init>(): miniboxing.tests.correctness.SpCls2_L[Ssp]               // is a specialized implementation of constructor SpCls2
    def normalizeMe[T](s: Ssp,t: T): T                                     // is a specialized implementation of method normalizeMe
    def normalizeMe_J[T](val SpCls2_S_TypeTag: Byte,s: Long,t: T): T       // is a forwarder to method normalizeMe
    def normalizeMe_J_n_J[T](val normalizeMe_J_T_TypeTag: Byte,val SpCls2_S_TypeTag: Byte,s: Long,t: T): T // is a forwarder to method normalizeMe
    def normalizeMe_n_J[T](val normalizeMe_T_TypeTag: Byte,s: Ssp,t: T): T // is a specialized implementation of method normalizeMe
  }




[[syntax trees at end of                   minibox]] // newSource1.scala
package miniboxing.tests.correctness {
  abstract trait SpCls2[@miniboxing.plugin.minispec S >: Nothing <: Any] extends Object {
    def normalizeMe[@miniboxing.plugin.minispec T >: Nothing <: Any](s: S, t: T): T;
    def normalizeMe_J[@miniboxing.plugin.minispec T >: Nothing <: Any](SpCls2_S_TypeTag: Byte, s: Long, t: T): T;
    def normalizeMe_J_n_J[@miniboxing.plugin.minispec T >: Nothing <: Any](normalizeMe_J_T_TypeTag: Byte, SpCls2_S_TypeTag: Byte, s: Long, t: T): T;
    def normalizeMe_n_J[@miniboxing.plugin.minispec T >: Nothing <: Any](normalizeMe_T_TypeTag: Byte, s: S, t: T): T
  };
  class SpCls2_J[Ssp >: Nothing <: Any] extends Object with miniboxing.tests.correctness.SpCls2[Ssp] {
    def <init>(SpCls2_S_TypeTag: Byte): miniboxing.tests.correctness.SpCls2_J[Ssp] = {
      SpCls2_J.super.<init>();
      ()
    };
    def normalizeMe[@miniboxing.plugin.minispec T >: Nothing <: Any](s: Ssp, t: T): T = SpCls2_J.this.normalizeMe_J[T](SpCls2_J.this.SpCls2_S_TypeTag, MiniboxConversions.this.box2minibox_tt[Ssp](s, SpCls2_J.this.SpCls2_S_TypeTag), t);
    def normalizeMe_J[@miniboxing.plugin.minispec T >: Nothing <: Any](SpCls2_S_TypeTag: Byte, s: Long, t: T): T = t;
    def normalizeMe_J_n_J[@miniboxing.plugin.minispec T >: Nothing <: Any](normalizeMe_J_T_TypeTag: Byte, SpCls2_S_TypeTag: Byte, s: Long, t: T): T = t;
    def normalizeMe_n_J[@miniboxing.plugin.minispec T >: Nothing <: Any](normalizeMe_T_TypeTag: Byte, s: Ssp, t: T): T = SpCls2_J.this.normalizeMe_J[T](SpCls2_J.this.SpCls2_S_TypeTag, MiniboxConversions.this.box2minibox_tt[Ssp](s, SpCls2_J.this.SpCls2_S_TypeTag), t);
    <paramaccessor> private[this] val SpCls2_S_TypeTag: Byte = _
  };
  class SpCls2_L[Ssp >: Nothing <: Any] extends Object with miniboxing.tests.correctness.SpCls2[Ssp] {
    def <init>(): miniboxing.tests.correctness.SpCls2_L[Ssp] = {
      SpCls2_L.super.<init>();
      ()
    };
    def normalizeMe[@miniboxing.plugin.minispec T >: Nothing <: Any](s: Ssp, t: T): T = t;
    def normalizeMe_J[@miniboxing.plugin.minispec T >: Nothing <: Any](SpCls2_S_TypeTag: Byte, s: Long, t: T): T = SpCls2_L.this.normalizeMe[T](MiniboxConversions.this.minibox2box[Ssp](s, SpCls2_S_TypeTag), t);
    def normalizeMe_J_n_J[@miniboxing.plugin.minispec T >: Nothing <: Any](normalizeMe_J_T_TypeTag: Byte, SpCls2_S_TypeTag: Byte, s: Long, t: T): T = SpCls2_L.this.normalizeMe[T](MiniboxConversions.this.minibox2box[Ssp](s, SpCls2_S_TypeTag), t);
    def normalizeMe_n_J[@miniboxing.plugin.minispec T >: Nothing <: Any](normalizeMe_T_TypeTag: Byte, s: Ssp, t: T): T = t
  }
}

[Now checking: minibox]
