Specializing class CC...

  // interface:
  abstract trait CC[T] extends Object {
    class DD[U] extends Object
    def test(): CC.this.DD[T]
    def test_J(val CC_T_TypeTag: Byte): CC.this.DD[T]
  }

  // specialized class:
  class CC_J[Tsp] extends CC[Tsp] {
    def <init>(val CC_T_TypeTag: Byte,c: Long): miniboxing.tests.compile.nested.CC_J[Tsp] // is a specialized implementation of constructor CC
    def test(): miniboxing.tests.compile.nested.CC_J[Tsp]#DD[Tsp]          // is a forwarder to method test_J
    def test_J(val CC_T_TypeTag: Byte): miniboxing.tests.compile.nested.CC_J[Tsp]#DD[Tsp] // is a specialized implementation of method test
    private[this] val CC_T_TypeTag: Byte                                   // no info
    private[this] val c: Long                                              // is a specialized implementation of value c
  }

  // specialized class:
  class CC_L[Tsp] extends CC[Tsp] {
    def <init>(c: Tsp): miniboxing.tests.compile.nested.CC_L[Tsp]          // is a specialized implementation of constructor CC
    def test(): miniboxing.tests.compile.nested.CC_L[Tsp]#DD[Tsp]          // is a specialized implementation of method test
    def test_J(val CC_T_TypeTag: Byte): miniboxing.tests.compile.nested.CC_L[Tsp]#DD[Tsp] // is a forwarder to method test
    private[this] val c: Tsp                                               // is a specialized implementation of value c
  }




Specializing class DD...

  // interface:
  abstract trait DD[U] extends Object {
  }

  // specialized class:
  class DD_J[Usp] extends CC.this.DD[Usp] {
    def <init>(val DD_U_TypeTag: Byte,d: Long): CC.this.DD_J[Usp]          // is a specialized implementation of constructor DD
    private[this] val DD_U_TypeTag: Byte                                   // no info
    private[this] val d: Long                                              // is a specialized implementation of value d
  }

  // specialized class:
  class DD_L[Usp] extends CC.this.DD[Usp] {
    def <init>(d: Usp): CC.this.DD_L[Usp]                                  // is a specialized implementation of constructor DD
    private[this] val d: Usp                                               // is a specialized implementation of value d
  }




[[syntax trees at end of                   minibox]] // newSource1.scala
package miniboxing.tests.compile.nested {
  abstract trait CC[@miniboxing.plugin.minispec T >: Nothing <: Any] extends Object {
    abstract trait DD[@miniboxing.plugin.minispec U >: Nothing <: Any] extends Object;
    def test(): CC.this.DD[T];
    def test_J(CC_T_TypeTag: Byte): CC.this.DD[T];
    class DD_J[Usp >: Nothing <: Any] extends Object with CC.this.DD[Usp] {
      def <init>(DD_U_TypeTag: Byte, d: Long): CC.this.DD_J[Usp] = {
        DD_J.super.<init>();
        ()
      };
      <paramaccessor> private[this] val DD_U_TypeTag: Byte = _;
      <paramaccessor> private[this] val d: Long = _
    };
    class DD_L[Usp >: Nothing <: Any] extends Object with CC.this.DD[Usp] {
      def <init>(d: Usp): CC.this.DD_L[Usp] = {
        DD_L.super.<init>();
        ()
      };
      <paramaccessor> private[this] val d: Usp = _
    }
  };
  class CC_J[Tsp >: Nothing <: Any] extends Object with miniboxing.tests.compile.nested.CC[Tsp] {
    def <init>(CC_T_TypeTag: Byte, c: Long): miniboxing.tests.compile.nested.CC_J[Tsp] = {
      CC_J.super.<init>();
      ()
    };
    def test(): miniboxing.tests.compile.nested.CC_J[Tsp]#DD[Tsp] = CC_J.this.test_J(CC_J.this.CC_T_TypeTag);
    def test_J(CC_T_TypeTag: Byte): miniboxing.tests.compile.nested.CC_J[Tsp]#DD[Tsp] = new CC_J.this.DD_J[Tsp](CC_T_TypeTag, CC_J.this.c);
    <paramaccessor> private[this] val CC_T_TypeTag: Byte = _;
    <paramaccessor> private[this] val c: Long = _
  };
  class CC_L[Tsp >: Nothing <: Any] extends Object with miniboxing.tests.compile.nested.CC[Tsp] {
    def <init>(c: Tsp): miniboxing.tests.compile.nested.CC_L[Tsp] = {
      CC_L.super.<init>();
      ()
    };
    def test(): miniboxing.tests.compile.nested.CC_L[Tsp]#DD[Tsp] = new CC_L.this.DD_L[Tsp](CC_L.this.c);
    def test_J(CC_T_TypeTag: Byte): miniboxing.tests.compile.nested.CC_L[Tsp]#DD[Tsp] = CC_L.this.test();
    <paramaccessor> private[this] val c: Tsp = _
  }
}

[Now checking: minibox]