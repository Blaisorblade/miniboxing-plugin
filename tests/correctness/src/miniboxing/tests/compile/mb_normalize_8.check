Specializing class SpCls8Tgt...

  // interface:
  abstract trait SpCls8Tgt[U] extends Object {
    def normalized[V](u: U,v: V): V
    def normalized_J[V](val U_TypeTag: Byte,u: U @storage,v: V): V
    def normalized_J_n_J[V](val V_TypeTag: Byte,val U_TypeTag: Byte,u: U @storage,v: V @storage): V @storage
    def normalized_n_J[V](val V_TypeTag: Byte,u: U,v: V @storage): V @storage
  }

  // specialized class:
  class SpCls8Tgt_J[Usp] extends SpCls8Tgt[Usp] {
    def <init>(val miniboxing|tests|correctness|SpCls8Tgt_J|U_TypeTag: Byte): miniboxing.tests.correctness.SpCls8Tgt_J[Usp] // is a specialized implementation of constructor SpCls8Tgt
    def normalized[V](u: Usp,v: V): V                                      // is a forwarder to the specialized member
    def normalized_J[V](val U_TypeTag: Byte,u: Usp @storage,v: V): V       // is a specialized implementation of method normalized
    def normalized_J_n_J[V](val V_TypeTag: Byte,val U_TypeTag: Byte,u: Usp @storage,v: V @storage): V @storage // is a specialized implementation of method normalized
    def normalized_n_J[V](val V_TypeTag: Byte,u: Usp,v: V @storage): V @storage // is a forwarder to the specialized member
    private[this] val miniboxing|tests|correctness|SpCls8Tgt_J|U_TypeTag: Byte // no info
  }

  // specialized class:
  class SpCls8Tgt_L[Usp] extends SpCls8Tgt[Usp] {
    def <init>(): miniboxing.tests.correctness.SpCls8Tgt_L[Usp]            // is a specialized implementation of constructor SpCls8Tgt
    def normalized[V](u: Usp,v: V): V                                      // is a specialized implementation of method normalized
    def normalized_J[V](val U_TypeTag: Byte,u: Usp @storage,v: V): V       // is a forwarder to the specialized member
    def normalized_J_n_J[V](val V_TypeTag: Byte,val U_TypeTag: Byte,u: Usp @storage,v: V @storage): V @storage // is a forwarder to the specialized member
    def normalized_n_J[V](val V_TypeTag: Byte,u: Usp,v: V @storage): V @storage // is a specialized implementation of method normalized
  }




Specializing class SpCls8...

  // interface:
  abstract trait SpCls8[T] extends Object {
    def normalizeMe[S](sp: miniboxing.tests.correctness.SpCls8Tgt[S],s: S,t: T): T
    def normalizeMe_J[S](val T_TypeTag: Byte,sp: miniboxing.tests.correctness.SpCls8Tgt[S],s: S,t: T @storage): T @storage
    def normalizeMe_J_n_J[S](val S_TypeTag: Byte,val T_TypeTag: Byte,sp: miniboxing.tests.correctness.SpCls8Tgt[S],s: S @storage,t: T @storage): T @storage
    def normalizeMe_n_J[S](val S_TypeTag: Byte,sp: miniboxing.tests.correctness.SpCls8Tgt[S],s: S @storage,t: T): T
  }

  // specialized class:
  class SpCls8_J[Tsp] extends SpCls8[Tsp] {
    def <init>(val miniboxing|tests|correctness|SpCls8_J|T_TypeTag: Byte): miniboxing.tests.correctness.SpCls8_J[Tsp] // is a specialized implementation of constructor SpCls8
    def normalizeMe[S](sp: miniboxing.tests.correctness.SpCls8Tgt[S],s: S,t: Tsp): Tsp // is a forwarder to the specialized member
    def normalizeMe_J[S](val T_TypeTag: Byte,sp: miniboxing.tests.correctness.SpCls8Tgt[S],s: S,t: Tsp @storage): Tsp @storage // is a specialized implementation of method normalizeMe
    def normalizeMe_J_n_J[S](val S_TypeTag: Byte,val T_TypeTag: Byte,sp: miniboxing.tests.correctness.SpCls8Tgt[S],s: S @storage,t: Tsp @storage): Tsp @storage // is a specialized implementation of method normalizeMe
    def normalizeMe_n_J[S](val S_TypeTag: Byte,sp: miniboxing.tests.correctness.SpCls8Tgt[S],s: S @storage,t: Tsp): Tsp // is a forwarder to the specialized member
    private[this] val miniboxing|tests|correctness|SpCls8_J|T_TypeTag: Byte // no info
  }

  // specialized class:
  class SpCls8_L[Tsp] extends SpCls8[Tsp] {
    def <init>(): miniboxing.tests.correctness.SpCls8_L[Tsp]               // is a specialized implementation of constructor SpCls8
    def normalizeMe[S](sp: miniboxing.tests.correctness.SpCls8Tgt[S],s: S,t: Tsp): Tsp // is a specialized implementation of method normalizeMe
    def normalizeMe_J[S](val T_TypeTag: Byte,sp: miniboxing.tests.correctness.SpCls8Tgt[S],s: S,t: Tsp @storage): Tsp @storage // is a forwarder to the specialized member
    def normalizeMe_J_n_J[S](val S_TypeTag: Byte,val T_TypeTag: Byte,sp: miniboxing.tests.correctness.SpCls8Tgt[S],s: S @storage,t: Tsp @storage): Tsp @storage // is a forwarder to the specialized member
    def normalizeMe_n_J[S](val S_TypeTag: Byte,sp: miniboxing.tests.correctness.SpCls8Tgt[S],s: S @storage,t: Tsp): Tsp // is a specialized implementation of method normalizeMe
  }




[Now checking: minibox-dupl]
[Not checkable: minibox-adapt]
[[syntax trees at end of              minibox-spec]] // newSource1.scala
package miniboxing.tests.correctness {
  abstract trait SpCls8Tgt[@miniboxed U >: Nothing <: Any] extends Object {
    def normalized[@miniboxed V >: Nothing <: Any](u: U, v: V): V;
    def normalized_J[@miniboxed V >: Nothing <: Any](U_TypeTag: Byte, u: Long, v: V): V;
    def normalized_J_n_J[V >: Nothing <: Any](V_TypeTag: Byte, U_TypeTag: Byte, u: Long, v: Long): Long;
    def normalized_n_J[V >: Nothing <: Any](V_TypeTag: Byte, u: U, v: Long): Long
  };
  class SpCls8Tgt_J[Usp >: Nothing <: Any] extends Object with miniboxing.tests.correctness.SpCls8Tgt[Usp] {
    def <init>(miniboxing|tests|correctness|SpCls8Tgt_J|U_TypeTag: Byte): miniboxing.tests.correctness.SpCls8Tgt_J[Usp] = {
      SpCls8Tgt_J.super.<init>();
      ()
    };
    def normalized[@miniboxed V >: Nothing <: Any](u: Usp, v: V): V = SpCls8Tgt_J.this.normalized_J[V](SpCls8Tgt_J.this.miniboxing|tests|correctness|SpCls8Tgt_J|U_TypeTag, MiniboxConversions.this.box2minibox_tt[Usp](u, SpCls8Tgt_J.this.miniboxing|tests|correctness|SpCls8Tgt_J|U_TypeTag), v);
    def normalized_J[@miniboxed V >: Nothing <: Any](U_TypeTag: Byte, u: Long, v: V): V = scala.this.Predef.???();
    def normalized_J_n_J[V >: Nothing <: Any](V_TypeTag: Byte, U_TypeTag: Byte, u: Long, v: Long): Long = MiniboxConversions.this.box2minibox_tt[Nothing](scala.this.Predef.???(), 9);
    def normalized_n_J[V >: Nothing <: Any](V_TypeTag: Byte, u: Usp, v: Long): Long = SpCls8Tgt_J.this.normalized_J_n_J[V](V_TypeTag, SpCls8Tgt_J.this.miniboxing|tests|correctness|SpCls8Tgt_J|U_TypeTag, MiniboxConversions.this.box2minibox_tt[Usp](u, SpCls8Tgt_J.this.miniboxing|tests|correctness|SpCls8Tgt_J|U_TypeTag), v);
    <paramaccessor> private[this] val miniboxing|tests|correctness|SpCls8Tgt_J|U_TypeTag: Byte = _
  };
  class SpCls8Tgt_L[Usp >: Nothing <: Any] extends Object with miniboxing.tests.correctness.SpCls8Tgt[Usp] {
    def <init>(): miniboxing.tests.correctness.SpCls8Tgt_L[Usp] = {
      SpCls8Tgt_L.super.<init>();
      ()
    };
    def normalized[@miniboxed V >: Nothing <: Any](u: Usp, v: V): V = scala.this.Predef.???();
    def normalized_J[@miniboxed V >: Nothing <: Any](U_TypeTag: Byte, u: Long, v: V): V = SpCls8Tgt_L.this.normalized[V](MiniboxConversions.this.minibox2box[Usp](u, U_TypeTag), v);
    def normalized_J_n_J[V >: Nothing <: Any](V_TypeTag: Byte, U_TypeTag: Byte, u: Long, v: Long): Long = SpCls8Tgt_L.this.normalized_n_J[V](V_TypeTag, MiniboxConversions.this.minibox2box[Usp](u, U_TypeTag), v);
    def normalized_n_J[V >: Nothing <: Any](V_TypeTag: Byte, u: Usp, v: Long): Long = MiniboxConversions.this.box2minibox_tt[Nothing](scala.this.Predef.???(), 9)
  };
  abstract trait SpCls8[@miniboxed T >: Nothing <: Any] extends Object {
    def normalizeMe[@miniboxed S >: Nothing <: Any](sp: miniboxing.tests.correctness.SpCls8Tgt[S], s: S, t: T): T;
    def normalizeMe_J[@miniboxed S >: Nothing <: Any](T_TypeTag: Byte, sp: miniboxing.tests.correctness.SpCls8Tgt[S], s: S, t: Long): Long;
    def normalizeMe_J_n_J[S >: Nothing <: Any](S_TypeTag: Byte, T_TypeTag: Byte, sp: miniboxing.tests.correctness.SpCls8Tgt[S], s: Long, t: Long): Long;
    def normalizeMe_n_J[S >: Nothing <: Any](S_TypeTag: Byte, sp: miniboxing.tests.correctness.SpCls8Tgt[S], s: Long, t: T): T
  };
  class SpCls8_J[Tsp >: Nothing <: Any] extends Object with miniboxing.tests.correctness.SpCls8[Tsp] {
    def <init>(miniboxing|tests|correctness|SpCls8_J|T_TypeTag: Byte): miniboxing.tests.correctness.SpCls8_J[Tsp] = {
      SpCls8_J.super.<init>();
      ()
    };
    def normalizeMe[@miniboxed S >: Nothing <: Any](sp: miniboxing.tests.correctness.SpCls8Tgt[S], s: S, t: Tsp): Tsp = MiniboxConversions.this.minibox2box[Tsp](SpCls8_J.this.normalizeMe_J[S](SpCls8_J.this.miniboxing|tests|correctness|SpCls8_J|T_TypeTag, sp, s, MiniboxConversions.this.box2minibox_tt[Tsp](t, SpCls8_J.this.miniboxing|tests|correctness|SpCls8_J|T_TypeTag)), SpCls8_J.this.miniboxing|tests|correctness|SpCls8_J|T_TypeTag);
    def normalizeMe_J[@miniboxed S >: Nothing <: Any](T_TypeTag: Byte, sp: miniboxing.tests.correctness.SpCls8Tgt[S], s: S, t: Long): Long = sp.normalized_n_J[Tsp](T_TypeTag, s, t);
    def normalizeMe_J_n_J[S >: Nothing <: Any](S_TypeTag: Byte, T_TypeTag: Byte, sp: miniboxing.tests.correctness.SpCls8Tgt[S], s: Long, t: Long): Long = sp.normalized_J_n_J[Tsp](T_TypeTag, S_TypeTag, s, t);
    def normalizeMe_n_J[S >: Nothing <: Any](S_TypeTag: Byte, sp: miniboxing.tests.correctness.SpCls8Tgt[S], s: Long, t: Tsp): Tsp = MiniboxConversions.this.minibox2box[Tsp](SpCls8_J.this.normalizeMe_J_n_J[S](S_TypeTag, SpCls8_J.this.miniboxing|tests|correctness|SpCls8_J|T_TypeTag, sp, s, MiniboxConversions.this.box2minibox_tt[Tsp](t, SpCls8_J.this.miniboxing|tests|correctness|SpCls8_J|T_TypeTag)), SpCls8_J.this.miniboxing|tests|correctness|SpCls8_J|T_TypeTag);
    <paramaccessor> private[this] val miniboxing|tests|correctness|SpCls8_J|T_TypeTag: Byte = _
  };
  class SpCls8_L[Tsp >: Nothing <: Any] extends Object with miniboxing.tests.correctness.SpCls8[Tsp] {
    def <init>(): miniboxing.tests.correctness.SpCls8_L[Tsp] = {
      SpCls8_L.super.<init>();
      ()
    };
    def normalizeMe[@miniboxed S >: Nothing <: Any](sp: miniboxing.tests.correctness.SpCls8Tgt[S], s: S, t: Tsp): Tsp = sp.normalized[Tsp](s, t);
    def normalizeMe_J[@miniboxed S >: Nothing <: Any](T_TypeTag: Byte, sp: miniboxing.tests.correctness.SpCls8Tgt[S], s: S, t: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](SpCls8_L.this.normalizeMe[S](sp, s, MiniboxConversions.this.minibox2box[Tsp](t, T_TypeTag)), T_TypeTag);
    def normalizeMe_J_n_J[S >: Nothing <: Any](S_TypeTag: Byte, T_TypeTag: Byte, sp: miniboxing.tests.correctness.SpCls8Tgt[S], s: Long, t: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](SpCls8_L.this.normalizeMe_n_J[S](S_TypeTag, sp, s, MiniboxConversions.this.minibox2box[Tsp](t, T_TypeTag)), T_TypeTag);
    def normalizeMe_n_J[S >: Nothing <: Any](S_TypeTag: Byte, sp: miniboxing.tests.correctness.SpCls8Tgt[S], s: Long, t: Tsp): Tsp = sp.normalized_J[Tsp](S_TypeTag, s, t)
  };
  object SpCls8Static extends Object {
    def <init>(): miniboxing.tests.correctness.SpCls8Static.type = {
      SpCls8Static.super.<init>();
      ()
    };
    def foo(): Int = MiniboxConversions.this.minibox2int(new miniboxing.tests.correctness.SpCls8Tgt_J[Byte](2).normalized_J_n_J[Int](5, 2, MiniboxConversions.this.byte2minibox(3), MiniboxConversions.this.int2minibox(4)));
    def bar[@miniboxed Z >: Nothing <: Any](z: Z): Z = new miniboxing.tests.correctness.SpCls8Tgt_J[Int](5).normalized_J[Z](5, MiniboxConversions.this.int2minibox(3), z);
    def bar_n_J[Z >: Nothing <: Any](Z_TypeTag: Byte, z: Long): Long = new miniboxing.tests.correctness.SpCls8Tgt_J[Int](5).normalized_J_n_J[Z](Z_TypeTag, 5, MiniboxConversions.this.int2minibox(3), z)
  }
}

[Now checking: minibox-spec]