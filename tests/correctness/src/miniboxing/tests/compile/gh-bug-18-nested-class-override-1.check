[Now checking: minibox-dupl]
[Not checkable: minibox-adapt]
[[syntax trees at end of              minibox-spec]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait Dist1[@miniboxed A >: Nothing <: Any] extends Object {
    def apply(a: A): A;
    def iterateUntil(): miniboxing.tests.compile.Dist1[A];
    def apply_J(A_TypeTag: Byte, a: Long): Long
  };
  abstract class Dist1_J[Asp >: Nothing <: Any] extends Object with miniboxing.tests.compile.Dist1[Asp] {
    def <init>(miniboxing|tests|compile|Dist1_J|A_TypeTag: Byte): miniboxing.tests.compile.Dist1_J[Asp] = {
      Dist1_J.super.<init>();
      ()
    };
    def apply(a: Asp): Asp;
    def apply_J(A_TypeTag: Byte, a: Long): Long;
    def iterateUntil(): miniboxing.tests.compile.Dist1[Asp] = {
      final class $anon extends miniboxing.tests.compile.Dist1_L[Asp] {
        def <init>(): anonymous class $anon = {
          $anon.super.<init>();
          ()
        };
        def apply(a: Asp): Asp = scala.this.Predef.???()
      };
      new anonymous class $anon()
    };
    <paramaccessor> private[this] val miniboxing|tests|compile|Dist1_J|A_TypeTag: Byte = _
  };
  abstract class Dist1_L[Asp >: Nothing <: Any] extends Object with miniboxing.tests.compile.Dist1[Asp] {
    def <init>(): miniboxing.tests.compile.Dist1_L[Asp] = {
      Dist1_L.super.<init>();
      ()
    };
    def apply(a: Asp): Asp;
    def apply_J(A_TypeTag: Byte, a: Long): Long;
    def iterateUntil(): miniboxing.tests.compile.Dist1[Asp] = {
      final class $anon extends miniboxing.tests.compile.Dist1_L[Asp] {
        def <init>(): anonymous class $anon = {
          $anon.super.<init>();
          ()
        };
        def apply(a: Asp): Asp = scala.this.Predef.???()
      };
      new anonymous class $anon()
    }
  }
}

[Now checking: minibox-spec]