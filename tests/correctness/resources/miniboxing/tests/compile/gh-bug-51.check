[Now checking: minibox-dupl]
[Not checkable: minibox-adapt]
[[syntax trees at end of              minibox-spec]] // newSource1.scala
package miniboxing.tests.compile.bug51 {
  abstract trait C[@miniboxed T >: Nothing <: Any] extends Object {
    <stable> <accessor> <paramaccessor> def t(): T;
    def foo[@miniboxed U >: Nothing <: Any](u: U): Boolean;
    def foo_n_D[U >: Nothing <: Any](U_TypeTag: Byte, u: Double): Boolean;
    def foo_n_J[U >: Nothing <: Any](U_TypeTag: Byte, u: Long): Boolean;
    <stable> <accessor> def t_D(T_TypeTag: Byte): Double;
    <stable> <accessor> def t_J(T_TypeTag: Byte): Long
  };
  class C_D[Tsp >: Nothing <: Any] extends Object with miniboxing.tests.compile.bug51.C[Tsp] {
    def <init>(miniboxing|tests|compile|bug51|C_D|T_TypeTag: Byte, t: Double): miniboxing.tests.compile.bug51.C_D[Tsp] = {
      C_D.super.<init>();
      ()
    };
    def foo[@miniboxed U >: Nothing <: Any](u: U): Boolean = MiniboxDispatchDouble.this.mboxed_eqeq_other(C_D.this.t_D(C_D.this.miniboxing|tests|compile|bug51|C_D|T_TypeTag), C_D.this.miniboxing|tests|compile|bug51|C_D|T_TypeTag, u);
    def foo_n_D[U >: Nothing <: Any](U_TypeTag: Byte, u: Double): Boolean = MiniboxDispatchDouble.this.mboxed_eqeq_tag(C_D.this.t_D(C_D.this.miniboxing|tests|compile|bug51|C_D|T_TypeTag), C_D.this.miniboxing|tests|compile|bug51|C_D|T_TypeTag, u, U_TypeTag);
    def foo_n_J[U >: Nothing <: Any](U_TypeTag: Byte, u: Long): Boolean = MiniboxDispatchDouble.this.mboxed_eqeq_other(C_D.this.t_D(C_D.this.miniboxing|tests|compile|bug51|C_D|T_TypeTag), C_D.this.miniboxing|tests|compile|bug51|C_D|T_TypeTag, MiniboxConversionsLong.this.minibox2box[U](u, U_TypeTag));
    <paramaccessor> private[this] val miniboxing|tests|compile|bug51|C_D|T_TypeTag: Byte = _;
    <paramaccessor> private[this] val t: Double = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = MiniboxConversionsDouble.this.minibox2box[Tsp](C_D.this.t_D(C_D.this.miniboxing|tests|compile|bug51|C_D|T_TypeTag), C_D.this.miniboxing|tests|compile|bug51|C_D|T_TypeTag);
    <stable> <accessor> def t_D(T_TypeTag: Byte): Double = C_D.this.t;
    <stable> <accessor> def t_J(T_TypeTag: Byte): Long = C_D.this.t_D(T_TypeTag)
  };
  class C_J[Tsp >: Nothing <: Any] extends Object with miniboxing.tests.compile.bug51.C[Tsp] {
    def <init>(miniboxing|tests|compile|bug51|C_J|T_TypeTag: Byte, t: Long): miniboxing.tests.compile.bug51.C_J[Tsp] = {
      C_J.super.<init>();
      ()
    };
    def foo[@miniboxed U >: Nothing <: Any](u: U): Boolean = MiniboxDispatchLong.this.mboxed_eqeq_other(C_J.this.t_J(C_J.this.miniboxing|tests|compile|bug51|C_J|T_TypeTag), C_J.this.miniboxing|tests|compile|bug51|C_J|T_TypeTag, u);
    def foo_n_D[U >: Nothing <: Any](U_TypeTag: Byte, u: Double): Boolean = MiniboxDispatchLong.this.mboxed_eqeq_other(C_J.this.t_J(C_J.this.miniboxing|tests|compile|bug51|C_J|T_TypeTag), C_J.this.miniboxing|tests|compile|bug51|C_J|T_TypeTag, MiniboxConversionsDouble.this.minibox2box[U](u, U_TypeTag));
    def foo_n_J[U >: Nothing <: Any](U_TypeTag: Byte, u: Long): Boolean = MiniboxDispatchLong.this.mboxed_eqeq_tag(C_J.this.t_J(C_J.this.miniboxing|tests|compile|bug51|C_J|T_TypeTag), C_J.this.miniboxing|tests|compile|bug51|C_J|T_TypeTag, u, U_TypeTag);
    <paramaccessor> private[this] val miniboxing|tests|compile|bug51|C_J|T_TypeTag: Byte = _;
    <paramaccessor> private[this] val t: Long = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = MiniboxConversionsLong.this.minibox2box[Tsp](C_J.this.t_J(C_J.this.miniboxing|tests|compile|bug51|C_J|T_TypeTag), C_J.this.miniboxing|tests|compile|bug51|C_J|T_TypeTag);
    <stable> <accessor> def t_D(T_TypeTag: Byte): Double = C_J.this.t_J(T_TypeTag);
    <stable> <accessor> def t_J(T_TypeTag: Byte): Long = C_J.this.t
  };
  class C_L[Tsp >: Nothing <: Any] extends Object with miniboxing.tests.compile.bug51.C[Tsp] {
    def <init>(t: Tsp): miniboxing.tests.compile.bug51.C_L[Tsp] = {
      C_L.super.<init>();
      ()
    };
    def foo[@miniboxed U >: Nothing <: Any](u: U): Boolean = C_L.this.t().==(u);
    def foo_n_D[U >: Nothing <: Any](U_TypeTag: Byte, u: Double): Boolean = C_L.this.t().==(MiniboxConversionsDouble.this.minibox2box[U](u, U_TypeTag));
    def foo_n_J[U >: Nothing <: Any](U_TypeTag: Byte, u: Long): Boolean = C_L.this.t().==(MiniboxConversionsLong.this.minibox2box[U](u, U_TypeTag));
    <paramaccessor> private[this] val t: Tsp = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = C_L.this.t;
    <stable> <accessor> def t_D(T_TypeTag: Byte): Double = MiniboxConversionsDouble.this.box2minibox_tt[Tsp](C_L.this.t(), T_TypeTag);
    <stable> <accessor> def t_J(T_TypeTag: Byte): Long = MiniboxConversionsLong.this.box2minibox_tt[Tsp](C_L.this.t(), T_TypeTag)
  }
}

[Now checking: minibox-spec]
newSource1.scala:3: error: 
**** ERROR DURING INTERNAL CHECKING ****
type mismatch;
 found   : Double
 required: Long
class C[@miniboxed T](val t: T) {
                          ^
[check: minibox-spec] newSource1.scala:3: trees differ
 old: C_J.this.t_J(T_TypeTag) [scala.reflect.internal.Trees$Apply] (tpe = Long)
 new: C_J.this.t_J(T_TypeTag).toDouble [scala.reflect.internal.Trees$Select] (tpe = null)
warning: TreeCheckers detected non-compliant trees in newSource1.scala
one warning found
one error found
