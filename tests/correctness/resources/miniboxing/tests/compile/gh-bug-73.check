newSource1.scala:7: warning: The method head in trait C1 is called from trait C2 using the `super.head` construction. However, after miniboxing, this construction becomes suboptimal, since there is no specialized variant of method head exactly matching the specialization in trait C2. To fix this, make sure that the specializations of trait C2 and trait C1 match exactly.
For more information, please see https://github.com/miniboxing/miniboxing-plugin/issues/73:
  override def head: A = super.head
                               ^
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.bug73.ver1 {
  abstract trait C1[A] extends Object {
    def /*C1*/$init$(): Unit = {
      ()
    };
    def head(): A = scala.sys.`package`.error("")
  };
  abstract trait C2[@miniboxed A] extends Object with miniboxing.tests.compile.bug73.ver1.C1[A] {
    override def head(): A;
    override def head$D(A$TypeTag: Byte): Double;
    override def head$J(A$TypeTag: Byte): Long
  };
  abstract trait C2$D[Asp] extends Object with miniboxing.tests.compile.bug73.ver1.C1[Asp] with miniboxing.tests.compile.bug73.ver1.C2[Asp] {
    def miniboxing|tests|compile|bug73|ver1|C2$D|A$TypeTag(): Byte;
    override def head(): Asp = MiniboxConversionsDouble.this.minibox2box[Asp](C2$D.this.head$D(C2$D.this.miniboxing|tests|compile|bug73|ver1|C2$D|A$TypeTag()), C2$D.this.miniboxing|tests|compile|bug73|ver1|C2$D|A$TypeTag());
    override def head$D(A$TypeTag: Byte): Double = MiniboxConversionsDouble.this.box2minibox_tt[Asp](C2$D.this.super$head(), A$TypeTag);
    override def head$J(A$TypeTag: Byte): Long = MiniboxConversions.this.unreachableConversion[Nothing]("Double", "Long")
  };
  abstract trait C2$J[Asp] extends Object with miniboxing.tests.compile.bug73.ver1.C1[Asp] with miniboxing.tests.compile.bug73.ver1.C2[Asp] {
    def miniboxing|tests|compile|bug73|ver1|C2$J|A$TypeTag(): Byte;
    override def head(): Asp = MiniboxConversionsLong.this.minibox2box[Asp](C2$J.this.head$J(C2$J.this.miniboxing|tests|compile|bug73|ver1|C2$J|A$TypeTag()), C2$J.this.miniboxing|tests|compile|bug73|ver1|C2$J|A$TypeTag());
    override def head$D(A$TypeTag: Byte): Double = MiniboxConversions.this.unreachableConversion[Nothing]("Long", "Double");
    override def head$J(A$TypeTag: Byte): Long = MiniboxConversionsLong.this.box2minibox_tt[Asp](C2$J.this.super$head(), A$TypeTag)
  };
  abstract trait C2$L[Asp] extends Object with miniboxing.tests.compile.bug73.ver1.C1[Asp] with miniboxing.tests.compile.bug73.ver1.C2[Asp] {
    override def head(): Asp = C2$L.this.super$head();
    override def head$D(A$TypeTag: Byte): Double = MiniboxConversionsDouble.this.box2minibox_tt[Asp](C2$L.this.head(), A$TypeTag);
    override def head$J(A$TypeTag: Byte): Long = MiniboxConversionsLong.this.box2minibox_tt[Asp](C2$L.this.head(), A$TypeTag)
  };
  class C3 extends Object with miniboxing.tests.compile.bug73.ver1.C2$J[Char] {
    def miniboxing|tests|compile|bug73|ver1|C2$J|A$TypeTag(): Byte = 4;
    def <init>(): miniboxing.tests.compile.bug73.ver1.C3 = {
      C3.super.<init>();
      ()
    }
  }
}
[Now checking: minibox-commit]