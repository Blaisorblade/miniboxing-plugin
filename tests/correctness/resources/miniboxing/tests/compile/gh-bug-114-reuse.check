[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.bug114.reuse {
  object Test extends Object {
    def <init>(): miniboxing.tests.compile.bug114.reuse.Test.type = {
      Test.super.<init>();
      ()
    };
    def getId(o: Any): Int = java.this.lang.System.identityHashCode(o);
    def main(args: Array[String]): Unit = {
      val f: miniboxing.runtime.MiniboxedFunction1[Int,Int] = {
        @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends miniboxing.runtime.AbstractMiniboxedFunction1_JJ[Int,Int] with Serializable {
          def <init>(): <$anon: miniboxing.runtime.AbstractMiniboxedFunction1_JJ[Int,Int]> = {
            $anonfun.super.<init>(5, 5);
            ()
          };
          final def apply(x: Int): Int = MiniboxConversions.this.minibox2int($anonfun.this.apply_JJ(5, 5, MiniboxConversions.this.int2minibox(x)));
          override def apply_JJ(T1_TypeTag: Byte, R_TypeTag: Byte, t1: Long): Long = t1
        };
        new <$anon: miniboxing.runtime.AbstractMiniboxedFunction1_JJ[Int,Int]>()
      };
      val g: miniboxing.runtime.MiniboxedFunction1[Int,Int] = MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Int, Int](5, 5, scala.this.Predef.identity[Int => Int](f.f()));
      val h: miniboxing.runtime.MiniboxedFunction1[Int,Int] = MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Int, Int](5, 5, scala.this.Predef.identity[Int => Int](g.f()));
      val idf: Int = Test.this.getId(f.f());
      val idg: Int = Test.this.getId(g.f());
      val idh: Int = Test.this.getId(h.f());
      scala.this.Predef.println(idf.==(idg));
      scala.this.Predef.println(idf.==(idh))
    }
  }
}
true
true
