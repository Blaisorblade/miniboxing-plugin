[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
Miniboxing plugin warning: Optimizing `MbTuple` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbTuple`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.bug38 {
  abstract trait Vector[@miniboxed E] extends Object;
  class Vector$J[Esp] extends Object with miniboxing.tests.compile.bug38.Vector[Esp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|bug38|Vector$J|E$TypeTag: Byte = _;
    <paramaccessor> private[this] val size: Int = _;
    def <init>(miniboxing|tests|compile|bug38|Vector$J|E$TypeTag: Byte, size: Int): miniboxing.tests.compile.bug38.Vector$J[Esp] = {
      Vector$J.super.<init>();
      ()
    };
    def <init>(miniboxing|tests|compile|bug38|Vector$J|E$TypeTag: Byte): miniboxing.tests.compile.bug38.Vector$J[Esp] = {
      Vector$J.this.<init>(miniboxing|tests|compile|bug38|Vector$J|E$TypeTag, 10);
      ()
    }
  };
  class Vector$L[Esp] extends Object with miniboxing.tests.compile.bug38.Vector[Esp] {
    <paramaccessor> private[this] val size: Int = _;
    def <init>(size: Int): miniboxing.tests.compile.bug38.Vector$L[Esp] = {
      Vector$L.super.<init>();
      ()
    };
    def <init>(): miniboxing.tests.compile.bug38.Vector$L[Esp] = {
      Vector$L.this.<init>(10);
      ()
    }
  }
}
[Now checking: minibox-commit]