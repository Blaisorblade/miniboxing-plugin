Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
Miniboxing plugin warning: Optimizing `MbTuple` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbTuple`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.bug53 {
  object Test1 extends Object {
    def <init>(): miniboxing.tests.compile.bug53.Test1.type = {
      Test1.super.<init>();
      ()
    };
    abstract trait BUG53[@miniboxed T] extends Object;
    class BUG53$J[Tsp] extends Object with miniboxing.tests.compile.bug53.Test1.BUG53[Tsp] {
      <paramaccessor> private[this] val miniboxing|tests|compile|bug53|Test1|BUG53$J|T$TypeTag: Byte = _;
      def <init>(miniboxing|tests|compile|bug53|Test1|BUG53$J|T$TypeTag: Byte): miniboxing.tests.compile.bug53.Test1.BUG53$J[Tsp] = {
        BUG53$J.super.<init>();
        ()
      }
    };
    class BUG53$L[Tsp] extends Object with miniboxing.tests.compile.bug53.Test1.BUG53[Tsp] {
      def <init>(): miniboxing.tests.compile.bug53.Test1.BUG53$L[Tsp] = {
        BUG53$L.super.<init>();
        ()
      }
    }
  }
}