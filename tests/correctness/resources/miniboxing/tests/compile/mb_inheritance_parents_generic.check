Specializing class DDDD...
newSource1.scala:9: warning: The miniboxed class DDDD extends the generic class CCCC, which triggers a limitation of the miniboxing transformation: any value of type DDDD cannot be used as a value of type CCCC, despite the fact that members and implementations are correctly inherited. There is a simple workaround to this problem, which you can apply to your code. For more information, please see https://github.com/miniboxing/miniboxing-plugin/issues/162. Note that this can lead to further errors down the line. Also, keep in mind you should not expose this class in your API, as it may break client code:
class DDDD[@miniboxed U] extends CCCC[U]
      ^
  // interface:
  abstract trait DDDD[U] extends CCCC[U] {
  }
  // specialized class:
  class DDDD_J[Usp] extends CCCC[Usp] with DDDD[Usp] {
    def <init>(val miniboxing|tests|compile|inheritance|DDDD_J|U_TypeTag: Byte): miniboxing.tests.compile.inheritance.DDDD_J[Usp] // is a specialized implementation of constructor DDDD
    private[this] val miniboxing|tests|compile|inheritance|DDDD_J|U_TypeTag: Byte // is a type tag
  }
  // specialized class:
  class DDDD_L[Usp] extends CCCC[Usp] with DDDD[Usp] {
    def <init>(): miniboxing.tests.compile.inheritance.DDDD_L[Usp]         // is a specialized implementation of constructor DDDD
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
newSource1.scala:4: warning: Heads-up: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
package miniboxing.tests.compile.inheritance
                                 ^
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.inheritance {
  class CCCC[T] extends Object {
    def <init>(): miniboxing.tests.compile.inheritance.CCCC[T] = {
      CCCC.super.<init>();
      ()
    }
  };
  abstract trait DDDD[@miniboxed U] extends AnyRef;
  class DDDD_J[Usp] extends miniboxing.tests.compile.inheritance.CCCC[Usp] with miniboxing.tests.compile.inheritance.DDDD[Usp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|inheritance|DDDD_J|U_TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|inheritance|DDDD_J|U_TypeTag: Byte): miniboxing.tests.compile.inheritance.DDDD_J[Usp] = {
      DDDD_J.super.<init>();
      ()
    }
  };
  class DDDD_L[Usp] extends miniboxing.tests.compile.inheritance.CCCC[Usp] with miniboxing.tests.compile.inheritance.DDDD[Usp] {
    def <init>(): miniboxing.tests.compile.inheritance.DDDD_L[Usp] = {
      DDDD_L.super.<init>();
      ()
    }
  }
}
[Now checking: minibox-commit]