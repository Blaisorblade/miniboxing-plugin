[[syntax trees at end of            minibox-commit]] // newSource1.scala
package <empty> {
  object Test extends Object {
    def <init>(): Test.type = {
      Test.super.<init>();
      ()
    };
    def MbTuple1Constructor[@miniboxed X](x: X): Unit = {
      val t1: (X,) = new (X,)(x);
      val t2: (Int,) = new (Int,)(1);
      val t3: (Double,) = new (Double,)(1.1);
      ()
    };
    def MbTuple1Constructor_n_D[X](X_TypeTag: Byte, x: Double): Unit = {
      val t1: (X,) = MiniboxedTuple.this.newTuple1_double[X](X_TypeTag, x);
      val t2: (Int,) = new (Int,)(1);
      val t3: (Double,) = new (Double,)(1.1);
      ()
    };
    def MbTuple1Constructor_n_J[X](X_TypeTag: Byte, x: Long): Unit = {
      val t1: (X,) = MiniboxedTuple.this.newTuple1_long[X](X_TypeTag, x);
      val t2: (Int,) = new (Int,)(1);
      val t3: (Double,) = new (Double,)(1.1);
      ()
    };
    def MbTuple2constructor[@miniboxed X, @miniboxed Y](x: X, y: Y): Unit = {
      val t1: (Int, Double) = new (Int, Double)(1, 1.1);
      val t2: (X, Y) = new (X, Y)(x, y);
      val t3: (Int, Y) = new (Int, Y)(1, y);
      val t4: (X, Double) = new (X, Double)(x, 1.1);
      val t6: (Int, Double) = new (Int, Double)(1, 1.1);
      val t7: (X, Y) = new (X, Y)(x, y);
      val t8: (Int, Y) = new (Int, Y)(1, y);
      val t9: (X, Double) = new (X, Double)(x, 1.1);
      ()
    };
    def MbTuple2constructor_n_DD[X, Y](X_TypeTag: Byte, Y_TypeTag: Byte, x: Double, y: Double): Unit = {
      val t1: (Int, Double) = new (Int, Double)(1, 1.1);
      val t2: (X, Y) = MiniboxedTuple.this.newTuple2_double_double[X, Y](X_TypeTag, Y_TypeTag, x, y);
      val t3: (Int, Y) = new (Int, Y)(1, MiniboxConversionsDouble.this.minibox2box[Y](y, Y_TypeTag));
      val t4: (X, Double) = new (X, Double)(MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag), 1.1);
      val t6: (Int, Double) = new (Int, Double)(1, 1.1);
      val t7: (X, Y) = MiniboxedTuple.this.newTuple2_double_double[X, Y](X_TypeTag, Y_TypeTag, x, y);
      val t8: (Int, Y) = new (Int, Y)(1, MiniboxConversionsDouble.this.minibox2box[Y](y, Y_TypeTag));
      val t9: (X, Double) = new (X, Double)(MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag), 1.1);
      ()
    };
    def MbTuple2constructor_n_DJ[X, Y](X_TypeTag: Byte, Y_TypeTag: Byte, x: Double, y: Long): Unit = {
      val t1: (Int, Double) = new (Int, Double)(1, 1.1);
      val t2: (X, Y) = MiniboxedTuple.this.newTuple2_double_long[X, Y](X_TypeTag, Y_TypeTag, x, y);
      val t3: (Int, Y) = new (Int, Y)(1, MiniboxConversionsLong.this.minibox2box[Y](y, Y_TypeTag));
      val t4: (X, Double) = new (X, Double)(MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag), 1.1);
      val t6: (Int, Double) = new (Int, Double)(1, 1.1);
      val t7: (X, Y) = MiniboxedTuple.this.newTuple2_double_long[X, Y](X_TypeTag, Y_TypeTag, x, y);
      val t8: (Int, Y) = new (Int, Y)(1, MiniboxConversionsLong.this.minibox2box[Y](y, Y_TypeTag));
      val t9: (X, Double) = new (X, Double)(MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag), 1.1);
      ()
    };
    def MbTuple2constructor_n_DL[X, Y](X_TypeTag: Byte, x: Double, y: Y): Unit = {
      val t1: (Int, Double) = new (Int, Double)(1, 1.1);
      val t2: (X, Y) = new (X, Y)(MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag), y);
      val t3: (Int, Y) = new (Int, Y)(1, y);
      val t4: (X, Double) = new (X, Double)(MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag), 1.1);
      val t6: (Int, Double) = new (Int, Double)(1, 1.1);
      val t7: (X, Y) = new (X, Y)(MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag), y);
      val t8: (Int, Y) = new (Int, Y)(1, y);
      val t9: (X, Double) = new (X, Double)(MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag), 1.1);
      ()
    };
    def MbTuple2constructor_n_JD[X, Y](X_TypeTag: Byte, Y_TypeTag: Byte, x: Long, y: Double): Unit = {
      val t1: (Int, Double) = new (Int, Double)(1, 1.1);
      val t2: (X, Y) = MiniboxedTuple.this.newTuple2_long_double[X, Y](X_TypeTag, Y_TypeTag, x, y);
      val t3: (Int, Y) = new (Int, Y)(1, MiniboxConversionsDouble.this.minibox2box[Y](y, Y_TypeTag));
      val t4: (X, Double) = new (X, Double)(MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag), 1.1);
      val t6: (Int, Double) = new (Int, Double)(1, 1.1);
      val t7: (X, Y) = MiniboxedTuple.this.newTuple2_long_double[X, Y](X_TypeTag, Y_TypeTag, x, y);
      val t8: (Int, Y) = new (Int, Y)(1, MiniboxConversionsDouble.this.minibox2box[Y](y, Y_TypeTag));
      val t9: (X, Double) = new (X, Double)(MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag), 1.1);
      ()
    };
    def MbTuple2constructor_n_JJ[X, Y](X_TypeTag: Byte, Y_TypeTag: Byte, x: Long, y: Long): Unit = {
      val t1: (Int, Double) = new (Int, Double)(1, 1.1);
      val t2: (X, Y) = MiniboxedTuple.this.newTuple2_long_long[X, Y](X_TypeTag, Y_TypeTag, x, y);
      val t3: (Int, Y) = new (Int, Y)(1, MiniboxConversionsLong.this.minibox2box[Y](y, Y_TypeTag));
      val t4: (X, Double) = new (X, Double)(MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag), 1.1);
      val t6: (Int, Double) = new (Int, Double)(1, 1.1);
      val t7: (X, Y) = MiniboxedTuple.this.newTuple2_long_long[X, Y](X_TypeTag, Y_TypeTag, x, y);
      val t8: (Int, Y) = new (Int, Y)(1, MiniboxConversionsLong.this.minibox2box[Y](y, Y_TypeTag));
      val t9: (X, Double) = new (X, Double)(MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag), 1.1);
      ()
    };
    def MbTuple2constructor_n_JL[X, Y](X_TypeTag: Byte, x: Long, y: Y): Unit = {
      val t1: (Int, Double) = new (Int, Double)(1, 1.1);
      val t2: (X, Y) = new (X, Y)(MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag), y);
      val t3: (Int, Y) = new (Int, Y)(1, y);
      val t4: (X, Double) = new (X, Double)(MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag), 1.1);
      val t6: (Int, Double) = new (Int, Double)(1, 1.1);
      val t7: (X, Y) = new (X, Y)(MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag), y);
      val t8: (Int, Y) = new (Int, Y)(1, y);
      val t9: (X, Double) = new (X, Double)(MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag), 1.1);
      ()
    };
    def MbTuple2constructor_n_LD[X, Y](Y_TypeTag: Byte, x: X, y: Double): Unit = {
      val t1: (Int, Double) = new (Int, Double)(1, 1.1);
      val t2: (X, Y) = new (X, Y)(x, MiniboxConversionsDouble.this.minibox2box[Y](y, Y_TypeTag));
      val t3: (Int, Y) = new (Int, Y)(1, MiniboxConversionsDouble.this.minibox2box[Y](y, Y_TypeTag));
      val t4: (X, Double) = new (X, Double)(x, 1.1);
      val t6: (Int, Double) = new (Int, Double)(1, 1.1);
      val t7: (X, Y) = new (X, Y)(x, MiniboxConversionsDouble.this.minibox2box[Y](y, Y_TypeTag));
      val t8: (Int, Y) = new (Int, Y)(1, MiniboxConversionsDouble.this.minibox2box[Y](y, Y_TypeTag));
      val t9: (X, Double) = new (X, Double)(x, 1.1);
      ()
    };
    def MbTuple2constructor_n_LJ[X, Y](Y_TypeTag: Byte, x: X, y: Long): Unit = {
      val t1: (Int, Double) = new (Int, Double)(1, 1.1);
      val t2: (X, Y) = new (X, Y)(x, MiniboxConversionsLong.this.minibox2box[Y](y, Y_TypeTag));
      val t3: (Int, Y) = new (Int, Y)(1, MiniboxConversionsLong.this.minibox2box[Y](y, Y_TypeTag));
      val t4: (X, Double) = new (X, Double)(x, 1.1);
      val t6: (Int, Double) = new (Int, Double)(1, 1.1);
      val t7: (X, Y) = new (X, Y)(x, MiniboxConversionsLong.this.minibox2box[Y](y, Y_TypeTag));
      val t8: (Int, Y) = new (Int, Y)(1, MiniboxConversionsLong.this.minibox2box[Y](y, Y_TypeTag));
      val t9: (X, Double) = new (X, Double)(x, 1.1);
      ()
    };
    def MbTupleAccessors[@miniboxed X](x: X): Unit = {
      val tuple1: (X,) = new (X,)(x);
      val tuple2: (X, X) = new (X, X)(x, x);
      val t1: X = tuple1._1();
      val t2: X = tuple2._1();
      val t3: X = tuple2._2();
      val tuple3: (Int,) = new (Int,)(1);
      val tuple4: (Double, X) = new (Double, X)(2.2, x);
      val t4: Int = tuple3._1();
      val t5: Double = tuple4._1();
      val t6: X = tuple4._2();
      ()
    };
    def MbTupleAccessors_n_D[X](X_TypeTag: Byte, x: Double): Unit = {
      val tuple1: (X,) = MiniboxedTuple.this.newTuple1_double[X](X_TypeTag, x);
      val tuple2: (X, X) = MiniboxedTuple.this.newTuple2_double_double[X, X](X_TypeTag, X_TypeTag, x, x);
      val t1: Double = MiniboxedTuple.this.tuple1_accessor_1_double[X](X_TypeTag, tuple1);
      val t2: Double = MiniboxedTuple.this.tuple2_accessor_1_double[X, X](X_TypeTag, tuple2);
      val t3: Double = MiniboxedTuple.this.tuple2_accessor_2_double[X, X](X_TypeTag, tuple2);
      val tuple3: (Int,) = new (Int,)(1);
      val tuple4: (Double, X) = new (Double, X)(2.2, MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag));
      val t4: Int = tuple3._1();
      val t5: Double = tuple4._1();
      val t6: Double = MiniboxedTuple.this.tuple2_accessor_2_double[Double, X](8, tuple4);
      ()
    };
    def MbTupleAccessors_n_J[X](X_TypeTag: Byte, x: Long): Unit = {
      val tuple1: (X,) = MiniboxedTuple.this.newTuple1_long[X](X_TypeTag, x);
      val tuple2: (X, X) = MiniboxedTuple.this.newTuple2_long_long[X, X](X_TypeTag, X_TypeTag, x, x);
      val t1: Long = MiniboxedTuple.this.tuple1_accessor_1_long[X](X_TypeTag, tuple1);
      val t2: Long = MiniboxedTuple.this.tuple2_accessor_1_long[X, X](X_TypeTag, tuple2);
      val t3: Long = MiniboxedTuple.this.tuple2_accessor_2_long[X, X](X_TypeTag, tuple2);
      val tuple3: (Int,) = new (Int,)(1);
      val tuple4: (Double, X) = new (Double, X)(2.2, MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag));
      val t4: Int = tuple3._1();
      val t5: Double = tuple4._1();
      val t6: Long = MiniboxedTuple.this.tuple2_accessor_2_long[Double, X](8, tuple4);
      ()
    }
  }
}

[Now checking: minibox-commit]
[[syntax trees at end of                specialize]] // newSource1.scala
package <empty> {
  object Test extends Object {
    def <init>(): Test.type = {
      Test.super.<init>();
      ()
    };
    def MbTuple1Constructor[@miniboxed X](x: X): Unit = {
      val t1: (X,) = new (X,)(x);
      val t2: (Int,) = new Tuple1$mcI$sp(1);
      val t3: (Double,) = new Tuple1$mcD$sp(1.1);
      ()
    };
    def MbTuple1Constructor_n_D[X](X_TypeTag: Byte, x: Double): Unit = {
      val t1: (X,) = MiniboxedTuple.this.newTuple1_double[X](X_TypeTag, x);
      val t2: (Int,) = new Tuple1$mcI$sp(1);
      val t3: (Double,) = new Tuple1$mcD$sp(1.1);
      ()
    };
    def MbTuple1Constructor_n_J[X](X_TypeTag: Byte, x: Long): Unit = {
      val t1: (X,) = MiniboxedTuple.this.newTuple1_long[X](X_TypeTag, x);
      val t2: (Int,) = new Tuple1$mcI$sp(1);
      val t3: (Double,) = new Tuple1$mcD$sp(1.1);
      ()
    };
    def MbTuple2constructor[@miniboxed X, @miniboxed Y](x: X, y: Y): Unit = {
      val t1: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t2: (X, Y) = new (X, Y)(x, y);
      val t3: (Int, Y) = new (Int, Y)(1, y);
      val t4: (X, Double) = new (X, Double)(x, 1.1);
      val t6: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t7: (X, Y) = new (X, Y)(x, y);
      val t8: (Int, Y) = new (Int, Y)(1, y);
      val t9: (X, Double) = new (X, Double)(x, 1.1);
      ()
    };
    def MbTuple2constructor_n_DD[X, Y](X_TypeTag: Byte, Y_TypeTag: Byte, x: Double, y: Double): Unit = {
      val t1: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t2: (X, Y) = MiniboxedTuple.this.newTuple2_double_double[X, Y](X_TypeTag, Y_TypeTag, x, y);
      val t3: (Int, Y) = new (Int, Y)(1, MiniboxConversionsDouble.this.minibox2box[Y](y, Y_TypeTag));
      val t4: (X, Double) = new (X, Double)(MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag), 1.1);
      val t6: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t7: (X, Y) = MiniboxedTuple.this.newTuple2_double_double[X, Y](X_TypeTag, Y_TypeTag, x, y);
      val t8: (Int, Y) = new (Int, Y)(1, MiniboxConversionsDouble.this.minibox2box[Y](y, Y_TypeTag));
      val t9: (X, Double) = new (X, Double)(MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag), 1.1);
      ()
    };
    def MbTuple2constructor_n_DJ[X, Y](X_TypeTag: Byte, Y_TypeTag: Byte, x: Double, y: Long): Unit = {
      val t1: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t2: (X, Y) = MiniboxedTuple.this.newTuple2_double_long[X, Y](X_TypeTag, Y_TypeTag, x, y);
      val t3: (Int, Y) = new (Int, Y)(1, MiniboxConversionsLong.this.minibox2box[Y](y, Y_TypeTag));
      val t4: (X, Double) = new (X, Double)(MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag), 1.1);
      val t6: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t7: (X, Y) = MiniboxedTuple.this.newTuple2_double_long[X, Y](X_TypeTag, Y_TypeTag, x, y);
      val t8: (Int, Y) = new (Int, Y)(1, MiniboxConversionsLong.this.minibox2box[Y](y, Y_TypeTag));
      val t9: (X, Double) = new (X, Double)(MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag), 1.1);
      ()
    };
    def MbTuple2constructor_n_DL[X, Y](X_TypeTag: Byte, x: Double, y: Y): Unit = {
      val t1: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t2: (X, Y) = new (X, Y)(MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag), y);
      val t3: (Int, Y) = new (Int, Y)(1, y);
      val t4: (X, Double) = new (X, Double)(MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag), 1.1);
      val t6: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t7: (X, Y) = new (X, Y)(MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag), y);
      val t8: (Int, Y) = new (Int, Y)(1, y);
      val t9: (X, Double) = new (X, Double)(MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag), 1.1);
      ()
    };
    def MbTuple2constructor_n_JD[X, Y](X_TypeTag: Byte, Y_TypeTag: Byte, x: Long, y: Double): Unit = {
      val t1: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t2: (X, Y) = MiniboxedTuple.this.newTuple2_long_double[X, Y](X_TypeTag, Y_TypeTag, x, y);
      val t3: (Int, Y) = new (Int, Y)(1, MiniboxConversionsDouble.this.minibox2box[Y](y, Y_TypeTag));
      val t4: (X, Double) = new (X, Double)(MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag), 1.1);
      val t6: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t7: (X, Y) = MiniboxedTuple.this.newTuple2_long_double[X, Y](X_TypeTag, Y_TypeTag, x, y);
      val t8: (Int, Y) = new (Int, Y)(1, MiniboxConversionsDouble.this.minibox2box[Y](y, Y_TypeTag));
      val t9: (X, Double) = new (X, Double)(MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag), 1.1);
      ()
    };
    def MbTuple2constructor_n_JJ[X, Y](X_TypeTag: Byte, Y_TypeTag: Byte, x: Long, y: Long): Unit = {
      val t1: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t2: (X, Y) = MiniboxedTuple.this.newTuple2_long_long[X, Y](X_TypeTag, Y_TypeTag, x, y);
      val t3: (Int, Y) = new (Int, Y)(1, MiniboxConversionsLong.this.minibox2box[Y](y, Y_TypeTag));
      val t4: (X, Double) = new (X, Double)(MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag), 1.1);
      val t6: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t7: (X, Y) = MiniboxedTuple.this.newTuple2_long_long[X, Y](X_TypeTag, Y_TypeTag, x, y);
      val t8: (Int, Y) = new (Int, Y)(1, MiniboxConversionsLong.this.minibox2box[Y](y, Y_TypeTag));
      val t9: (X, Double) = new (X, Double)(MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag), 1.1);
      ()
    };
    def MbTuple2constructor_n_JL[X, Y](X_TypeTag: Byte, x: Long, y: Y): Unit = {
      val t1: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t2: (X, Y) = new (X, Y)(MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag), y);
      val t3: (Int, Y) = new (Int, Y)(1, y);
      val t4: (X, Double) = new (X, Double)(MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag), 1.1);
      val t6: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t7: (X, Y) = new (X, Y)(MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag), y);
      val t8: (Int, Y) = new (Int, Y)(1, y);
      val t9: (X, Double) = new (X, Double)(MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag), 1.1);
      ()
    };
    def MbTuple2constructor_n_LD[X, Y](Y_TypeTag: Byte, x: X, y: Double): Unit = {
      val t1: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t2: (X, Y) = new (X, Y)(x, MiniboxConversionsDouble.this.minibox2box[Y](y, Y_TypeTag));
      val t3: (Int, Y) = new (Int, Y)(1, MiniboxConversionsDouble.this.minibox2box[Y](y, Y_TypeTag));
      val t4: (X, Double) = new (X, Double)(x, 1.1);
      val t6: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t7: (X, Y) = new (X, Y)(x, MiniboxConversionsDouble.this.minibox2box[Y](y, Y_TypeTag));
      val t8: (Int, Y) = new (Int, Y)(1, MiniboxConversionsDouble.this.minibox2box[Y](y, Y_TypeTag));
      val t9: (X, Double) = new (X, Double)(x, 1.1);
      ()
    };
    def MbTuple2constructor_n_LJ[X, Y](Y_TypeTag: Byte, x: X, y: Long): Unit = {
      val t1: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t2: (X, Y) = new (X, Y)(x, MiniboxConversionsLong.this.minibox2box[Y](y, Y_TypeTag));
      val t3: (Int, Y) = new (Int, Y)(1, MiniboxConversionsLong.this.minibox2box[Y](y, Y_TypeTag));
      val t4: (X, Double) = new (X, Double)(x, 1.1);
      val t6: (Int, Double) = new Tuple2$mcID$sp(1, 1.1);
      val t7: (X, Y) = new (X, Y)(x, MiniboxConversionsLong.this.minibox2box[Y](y, Y_TypeTag));
      val t8: (Int, Y) = new (Int, Y)(1, MiniboxConversionsLong.this.minibox2box[Y](y, Y_TypeTag));
      val t9: (X, Double) = new (X, Double)(x, 1.1);
      ()
    };
    def MbTupleAccessors[@miniboxed X](x: X): Unit = {
      val tuple1: (X,) = new (X,)(x);
      val tuple2: (X, X) = new (X, X)(x, x);
      val t1: X = tuple1._1();
      val t2: X = tuple2._1();
      val t3: X = tuple2._2();
      val tuple3: (Int,) = new Tuple1$mcI$sp(1);
      val tuple4: (Double, X) = new (Double, X)(2.2, x);
      val t4: Int = tuple3._1$mcI$sp();
      val t5: Double = tuple4._1$mcD$sp();
      val t6: X = tuple4._2();
      ()
    };
    def MbTupleAccessors_n_D[X](X_TypeTag: Byte, x: Double): Unit = {
      val tuple1: (X,) = MiniboxedTuple.this.newTuple1_double[X](X_TypeTag, x);
      val tuple2: (X, X) = MiniboxedTuple.this.newTuple2_double_double[X, X](X_TypeTag, X_TypeTag, x, x);
      val t1: Double = MiniboxedTuple.this.tuple1_accessor_1_double[X](X_TypeTag, tuple1);
      val t2: Double = MiniboxedTuple.this.tuple2_accessor_1_double[X, X](X_TypeTag, tuple2);
      val t3: Double = MiniboxedTuple.this.tuple2_accessor_2_double[X, X](X_TypeTag, tuple2);
      val tuple3: (Int,) = new Tuple1$mcI$sp(1);
      val tuple4: (Double, X) = new (Double, X)(2.2, MiniboxConversionsDouble.this.minibox2box[X](x, X_TypeTag));
      val t4: Int = tuple3._1$mcI$sp();
      val t5: Double = tuple4._1$mcD$sp();
      val t6: Double = MiniboxedTuple.this.tuple2_accessor_2_double[Double, X](8, tuple4);
      ()
    };
    def MbTupleAccessors_n_J[X](X_TypeTag: Byte, x: Long): Unit = {
      val tuple1: (X,) = MiniboxedTuple.this.newTuple1_long[X](X_TypeTag, x);
      val tuple2: (X, X) = MiniboxedTuple.this.newTuple2_long_long[X, X](X_TypeTag, X_TypeTag, x, x);
      val t1: Long = MiniboxedTuple.this.tuple1_accessor_1_long[X](X_TypeTag, tuple1);
      val t2: Long = MiniboxedTuple.this.tuple2_accessor_1_long[X, X](X_TypeTag, tuple2);
      val t3: Long = MiniboxedTuple.this.tuple2_accessor_2_long[X, X](X_TypeTag, tuple2);
      val tuple3: (Int,) = new Tuple1$mcI$sp(1);
      val tuple4: (Double, X) = new (Double, X)(2.2, MiniboxConversionsLong.this.minibox2box[X](x, X_TypeTag));
      val t4: Int = tuple3._1$mcI$sp();
      val t5: Double = tuple4._1$mcD$sp();
      val t6: Long = MiniboxedTuple.this.tuple2_accessor_2_long[Double, X](8, tuple4);
      ()
    }
  }
}

