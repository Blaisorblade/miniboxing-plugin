[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
Miniboxing plugin warning: Optimizing `MbTuple` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbTuple`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.correctness.erasure.torture3 {
  abstract trait A[@miniboxed T] extends Object {
    def foo(c: T): Any;
    def foo$J(T$TypeTag: Byte, c: Long): Any
  };
  class A$J[Tsp] extends Object with miniboxing.tests.correctness.erasure.torture3.A[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|correctness|erasure|torture3|A$J|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|correctness|erasure|torture3|A$J|T$TypeTag: Byte): miniboxing.tests.correctness.erasure.torture3.A$J[Tsp] = {
      A$J.super.<init>();
      ()
    };
    def foo(c: Tsp): Any = A$J.this.foo$J(A$J.this.miniboxing|tests|correctness|erasure|torture3|A$J|T$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](c, A$J.this.miniboxing|tests|correctness|erasure|torture3|A$J|T$TypeTag));
    def foo$J(T$TypeTag: Byte, c: Long): Any = {
      val x: Any = MiniboxConversions.this.minibox2box[Tsp](c, T$TypeTag);
      val hc: Int = MiniboxDispatch.this.mboxed_hashCode(c, T$TypeTag);
      val eq: Boolean = MiniboxDispatch.this.mboxed_eqeq_other(c, T$TypeTag, 3);
      val ts: String = MiniboxDispatch.this.mboxed_toString(c, T$TypeTag);
      ()
    }
  };
  class A$L[Tsp] extends Object with miniboxing.tests.correctness.erasure.torture3.A[Tsp] {
    def <init>(): miniboxing.tests.correctness.erasure.torture3.A$L[Tsp] = {
      A$L.super.<init>();
      ()
    };
    def foo(c: Tsp): Any = {
      val x: Any = c;
      val hc: Int = c.hashCode();
      val eq: Boolean = c.==(3);
      val ts: String = c.toString();
      ()
    };
    def foo$J(T$TypeTag: Byte, c: Long): Any = A$L.this.foo(MiniboxConversions.this.minibox2box[Tsp](c, T$TypeTag))
  }
}
[Now checking: minibox-commit]