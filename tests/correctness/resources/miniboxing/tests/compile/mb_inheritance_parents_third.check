Specializing class CCC...
  // interface:
  abstract trait CCC[T] extends Object {
  }
  // specialized class:
  class CCC$J[Tsp] extends CCC[Tsp] {
    def <init>(val miniboxing|tests|compile|inheritance|CCC$J|T$TypeTag: Byte): miniboxing.tests.compile.inheritance.CCC$J[Tsp] // is a specialized implementation of constructor CCC
    private[this] val miniboxing|tests|compile|inheritance|CCC$J|T$TypeTag: Byte // is a type tag
  }
  // specialized class:
  class CCC$L[Tsp] extends CCC[Tsp] {
    def <init>(): miniboxing.tests.compile.inheritance.CCC$L[Tsp]          // is a specialized implementation of constructor CCC
  }
Specializing class DDD...
  // interface:
  abstract trait DDD[U] extends CCC[U] {
  }
  // specialized class:
  class DDD$J[Usp] extends CCC$J[Usp] with DDD[Usp] {
    def <init>(val miniboxing|tests|compile|inheritance|DDD$J|U$TypeTag: Byte): miniboxing.tests.compile.inheritance.DDD$J[Usp] // is a specialized implementation of constructor DDD
    private[this] val miniboxing|tests|compile|inheritance|DDD$J|U$TypeTag: Byte // is a type tag
  }
  // specialized class:
  class DDD$L[Usp] extends CCC$L[Usp] with DDD[Usp] {
    def <init>(): miniboxing.tests.compile.inheritance.DDD$L[Usp]          // is a specialized implementation of constructor DDD
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
Miniboxing plugin warning: Optimizing `MbTuple` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbTuple`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.inheritance {
  abstract trait CCC[@miniboxed T] extends Object;
  class CCC$J[Tsp] extends Object with miniboxing.tests.compile.inheritance.CCC[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|inheritance|CCC$J|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|inheritance|CCC$J|T$TypeTag: Byte): miniboxing.tests.compile.inheritance.CCC$J[Tsp] = {
      CCC$J.super.<init>();
      ()
    }
  };
  class CCC$L[Tsp] extends Object with miniboxing.tests.compile.inheritance.CCC[Tsp] {
    def <init>(): miniboxing.tests.compile.inheritance.CCC$L[Tsp] = {
      CCC$L.super.<init>();
      ()
    }
  };
  abstract trait DDD[@miniboxed U] extends Object;
  class DDD$J[Usp] extends miniboxing.tests.compile.inheritance.CCC$J[Usp] with miniboxing.tests.compile.inheritance.DDD[Usp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|inheritance|DDD$J|U$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|inheritance|DDD$J|U$TypeTag: Byte): miniboxing.tests.compile.inheritance.DDD$J[Usp] = {
      DDD$J.super.<init>(miniboxing|tests|compile|inheritance|DDD$J|U$TypeTag);
      ()
    }
  };
  class DDD$L[Usp] extends miniboxing.tests.compile.inheritance.CCC$L[Usp] with miniboxing.tests.compile.inheritance.DDD[Usp] {
    def <init>(): miniboxing.tests.compile.inheritance.DDD$L[Usp] = {
      DDD$L.super.<init>();
      ()
    }
  }
}
[Now checking: minibox-commit]