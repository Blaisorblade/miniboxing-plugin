warning: The two-way transformation (with long and double as storage types) has become default in version 0.4 version of the miniboxing plugin, so there is no need to specify it in the command line
newSource1.scala:4: warning: The side-effecting statement(s) in the miniboxed class A's constructor will not be miniboxed. Please note this is caused by the fact that the miniboxing plugin was instructed not to specialize side-effecting constructor statements.
  println("we want a warning for this!")
         ^
newSource1.scala:8: warning: The side-effecting statement(s) in the miniboxed class C's constructor will not be miniboxed. Please note this is caused by the fact that the miniboxing plugin was instructed not to specialize side-effecting constructor statements.
  println(new A(t).getClass())
         ^
newSource1.scala:1: warning: Heads-up: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
package miniboxing.tests.compile.bug64.workaround
                                       ^
we want a warning for this!
class miniboxing.tests.compile.bug64.workaround.A_L
we want a warning for this!
class miniboxing.tests.compile.bug64.workaround.A_L
we want a warning for this!
class miniboxing.tests.compile.bug64.workaround.A_L
we want a warning for this!
class miniboxing.tests.compile.bug64.workaround.A_J
we want a warning for this!
class miniboxing.tests.compile.bug64.workaround.A_J
we want a warning for this!
class miniboxing.tests.compile.bug64.workaround.A_L