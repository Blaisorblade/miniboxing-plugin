[[syntax trees at end of            minibox-inject]] // newSource1.scala
package miniboxing.tests.compile.bug69.red2 {
  object Test extends Object {
    def <init>(): miniboxing.tests.compile.bug69.red2.Test.type = {
      Test.super.<init>();
      ()
    };
    def foo[@miniboxed T](t: T): T = {
      def bar[@miniboxed U](u: U): U = {
        def baz[@miniboxed V](v: V): V = v;
        def baz$n$J[V](V$TypeTag: Byte, v: V @storage[Long]): V @storage[Long] = v;
        baz[U](u)
      };
      def bar$n$J[U](U$TypeTag: Byte, u: U @storage[Long]): U @storage[Long] = {
        def baz[@miniboxed V](v: V): V = v;
        def baz$n$J[V](V$TypeTag: Byte, v: V @storage[Long]): V @storage[Long] = v;
        baz[U](u)
      };
      bar[T](t)
    };
    def foo$n$J[T](T$TypeTag: Byte, t: T @storage[Long]): T @storage[Long] = {
      def bar[@miniboxed U](u: U): U = {
        def baz[@miniboxed V](v: V): V = v;
        def baz$n$J[V](V$TypeTag: Byte, v: V @storage[Long]): V @storage[Long] = v;
        baz[U](u)
      };
      def bar$n$J[U](U$TypeTag: Byte, u: U @storage[Long]): U @storage[Long] = {
        def baz[@miniboxed V](v: V): V = v;
        def baz$n$J[V](V$TypeTag: Byte, v: V @storage[Long]): V @storage[Long] = v;
        baz[U](u)
      };
      bar[T](t)
    }
  }
}
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
Miniboxing plugin warning: Optimizing `MbTuple` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbTuple`-s will be generic and will box.