[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.spec.interop.functions2 {
  object Fuctions2 extends Object {
    def <init>(): miniboxing.tests.compile.spec.interop.functions2.Fuctions2.type = {
      Fuctions2.super.<init>();
      ()
    };
    def main(args: Array[String]): Unit = {
      val f1: miniboxing.runtime.MiniboxedFunction1[Int,Int] = {
        @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Int] with Serializable {
          def <init>(): <$anon: Int => Int> = {
            $anonfun.super.<init>();
            ()
          };
          final def apply(x: Int): Int = x
        };
        MiniboxedFunctionBridge.this.function1_bridge[Int, Int]((new <$anon: Int => Int>(): Int => Int))
      };
      f1.apply_JJ(5, 5, MiniboxConversions.this.int2minibox(4));
      val f2: miniboxing.runtime.MiniboxedFunction1[Int,Int] = Fuctions2.this.foo();
      f2.apply_JJ(5, 5, MiniboxConversions.this.int2minibox(3));
      val fl: List[Int => Int] = immutable.this.List.apply[Int => Int](scala.this.Predef.wrapRefArray[Int => Int](Array[Int => Int]{f2.f()}));
      {
        fl.apply(0).apply(3);
        ()
      }
    };
    def foo(): miniboxing.runtime.MiniboxedFunction1[Int,Int] = {
      @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Int] with Serializable {
        def <init>(): <$anon: Int => Int> = {
          $anonfun.super.<init>();
          ()
        };
        final def apply(x: Int): Int = x
      };
      MiniboxedFunctionBridge.this.function1_bridge[Int, Int]((new <$anon: Int => Int>(): Int => Int))
    }
  }
}
