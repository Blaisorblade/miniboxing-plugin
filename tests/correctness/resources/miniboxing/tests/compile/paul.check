Specializing class Foo...
  // interface:
  abstract trait Foo[A] extends Object {
  }
  // specialized class:
  final class Foo$J[Asp] extends Foo[Asp] {
    private def <init>(val Foo$J|A$TypeTag: Byte,x: Asp @storage[Long]): Foo$J[Asp] // is a specialized implementation of constructor Foo
    private[this] val Foo$J|A$TypeTag: Byte                                // is a type tag
    private[this] val x: Asp @storage[Long]                                // is a specialized implementation of value x
  }
  // specialized class:
  final class Foo$D[Asp] extends Foo[Asp] {
    private def <init>(val Foo$D|A$TypeTag: Byte,x: Asp @storage[Double]): Foo$D[Asp] // is a specialized implementation of constructor Foo
    private[this] val Foo$D|A$TypeTag: Byte                                // is a type tag
    private[this] val x: Asp @storage[Double]                              // is a specialized implementation of value x
  }
  // specialized class:
  final class Foo$L[Asp] extends Foo[Asp] {
    private def <init>(x: Asp): Foo$L[Asp]                                 // is a specialized implementation of constructor Foo
    private[this] val x: Asp                                               // is a specialized implementation of value x
  }