[Now checking: minibox-inject]
[Not checkable: minibox-coerce]
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait Dist2[@miniboxed A] extends Object {
    def apply(a: A): A;
    def apply_J(A_TypeTag: Byte, a: Long): Long;
    def iterateUntil(): miniboxing.tests.compile.Dist2[A]
  };
  abstract class Dist2_J[Asp] extends Object with miniboxing.tests.compile.Dist2[Asp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|Dist2_J|A_TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|Dist2_J|A_TypeTag: Byte): miniboxing.tests.compile.Dist2_J[Asp] = {
      Dist2_J.super.<init>();
      ()
    };
    def apply(a: Asp): Asp = MiniboxConversions.this.minibox2box[Asp](Dist2_J.this.apply_J(Dist2_J.this.miniboxing|tests|compile|Dist2_J|A_TypeTag, MiniboxConversions.this.box2minibox_tt[Asp](a, Dist2_J.this.miniboxing|tests|compile|Dist2_J|A_TypeTag)), Dist2_J.this.miniboxing|tests|compile|Dist2_J|A_TypeTag);
    def apply_J(A_TypeTag: Byte, a: Long): Long;
    def iterateUntil(): miniboxing.tests.compile.Dist2[Asp] = {
      final class $anon extends miniboxing.tests.compile.Dist2_J[Asp] {
        def <init>(): anonymous class $anon = {
          $anon.super.<init>(Dist2_J.this.miniboxing|tests|compile|Dist2_J|A_TypeTag);
          ()
        };
        protected def miniboxing|tests|compile|Dist2_J|$anon|loop(a: Long): Long = a;
        protected def loop(a: Asp): Asp = MiniboxConversions.this.minibox2box[Asp](miniboxing|tests|compile|Dist2_J|$anon|loop(MiniboxConversions.this.box2minibox_tt[Asp](a, Dist2_J.this.miniboxing|tests|compile|Dist2_J|A_TypeTag)), Dist2_J.this.miniboxing|tests|compile|Dist2_J|A_TypeTag);
        protected def miniboxing|tests|compile|Dist2_J|$anon|apply(a: Long): Long = $anon.this.miniboxing|tests|compile|Dist2_J|$anon|loop(a);
        def apply(a: Asp): Asp = MiniboxConversions.this.minibox2box[Asp]($anon.this.apply_J(Dist2_J.this.miniboxing|tests|compile|Dist2_J|A_TypeTag, MiniboxConversions.this.box2minibox_tt[Asp](a, Dist2_J.this.miniboxing|tests|compile|Dist2_J|A_TypeTag)), Dist2_J.this.miniboxing|tests|compile|Dist2_J|A_TypeTag);
        override protected def apply_J(A_TypeTag: Byte, a: Long): Long = miniboxing|tests|compile|Dist2_J|$anon|apply(a)
      };
      new anonymous class $anon()
    }
  };
  abstract class Dist2_L[Asp] extends Object with miniboxing.tests.compile.Dist2[Asp] {
    def <init>(): miniboxing.tests.compile.Dist2_L[Asp] = {
      Dist2_L.super.<init>();
      ()
    };
    def apply(a: Asp): Asp;
    def apply_J(A_TypeTag: Byte, a: Long): Long = MiniboxConversions.this.box2minibox_tt[Asp](Dist2_L.this.apply(MiniboxConversions.this.minibox2box[Asp](a, A_TypeTag)), A_TypeTag);
    def iterateUntil(): miniboxing.tests.compile.Dist2[Asp] = {
      final class $anon extends miniboxing.tests.compile.Dist2_L[Asp] {
        def <init>(): anonymous class $anon = {
          $anon.super.<init>();
          ()
        };
        protected def loop(a: Asp): Asp = a;
        def apply(a: Asp): Asp = $anon.this.loop(a)
      };
      new anonymous class $anon()
    }
  }
}
[Now checking: minibox-commit]