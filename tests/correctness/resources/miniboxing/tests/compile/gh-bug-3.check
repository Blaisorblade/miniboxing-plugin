[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
Miniboxing plugin warning: Optimizing `MbTuple` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbTuple`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait BUG3[@miniboxed T] extends Object {
    def hashMode(): T;
    def hashMode$J(T$TypeTag: Byte): Long
  };
  class BUG3$J[Tsp] extends Object with miniboxing.tests.compile.BUG3[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|BUG3$J|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|BUG3$J|T$TypeTag: Byte): miniboxing.tests.compile.BUG3$J[Tsp] = {
      BUG3$J.super.<init>();
      ()
    };
    def hashMode(): Tsp = MiniboxConversions.this.minibox2box[Tsp](BUG3$J.this.hashMode$J(BUG3$J.this.miniboxing|tests|compile|BUG3$J|T$TypeTag), BUG3$J.this.miniboxing|tests|compile|BUG3$J|T$TypeTag);
    def hashMode$J(T$TypeTag: Byte): Long = {
      val headhash: Long = MiniboxConversions.this.box2minibox_tt[Tsp](scala.this.Predef.???(), T$TypeTag);
      headhash
    }
  };
  class BUG3$L[Tsp] extends Object with miniboxing.tests.compile.BUG3[Tsp] {
    def <init>(): miniboxing.tests.compile.BUG3$L[Tsp] = {
      BUG3$L.super.<init>();
      ()
    };
    def hashMode(): Tsp = {
      val headhash: Tsp = scala.this.Predef.???();
      headhash
    };
    def hashMode$J(T$TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Tsp](BUG3$L.this.hashMode(), T$TypeTag)
  }
}
[Now checking: minibox-commit]