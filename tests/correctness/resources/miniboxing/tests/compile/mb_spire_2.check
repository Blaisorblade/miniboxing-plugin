Specializing class Complex...
  // interface:
  abstract trait Complex[T] extends Product with Serializable {
    def canEqual(x$1: Any): Boolean
    def copy$default$1[T](): T
    def copy$default$1_J[T](val T_TypeTag: Byte): T @storage[Long]
    def copy$default$1_J_n_J[T](val T_TypeTag: Byte,val T_TypeTag: Byte): T @storage[Long]
    def copy$default$1_n_J[T](val T_TypeTag: Byte): T
    def copy$default$2[T](): T
    def copy$default$2_J[T](val T_TypeTag: Byte): T @storage[Long]
    def copy$default$2_J_n_J[T](val T_TypeTag: Byte,val T_TypeTag: Byte): T @storage[Long]
    def copy$default$2_n_J[T](val T_TypeTag: Byte): T
    def copy[T](t1: T,t2: T): miniboxing.tests.compile.Complex[T]
    def copy_n_J[T](val T_TypeTag: Byte,t1: T @storage[Long],t2: T @storage[Long]): miniboxing.tests.compile.Complex[T]
    def productArity(): Int
    def productElement(x$1: Int): Any
    override def equals(x$1: Any): Boolean
    override def hashCode(): Int
    override def productIterator(): Iterator[Any]
    override def productPrefix(): String
    override def toString(): String
    val t1(): T
    val t1_J(val T_TypeTag: Byte): T @storage[Long]
    val t2(): T
    val t2_J(val T_TypeTag: Byte): T @storage[Long]
  }
  // specialized class:
  case class Complex_J[Tsp] extends Product with Serializable with Complex[Tsp] {
    def <init>(val miniboxing|tests|compile|Complex_J|T_TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long]): miniboxing.tests.compile.Complex_J[Tsp] // is a specialized implementation of constructor Complex
    def canEqual(x$1: Any): Boolean                                        // is a specialized implementation of method canEqual
    def copy$default$1[T](): Tsp                                           // is a forwarder to the specialized member
    def copy$default$1_J[T](val T_TypeTag: Byte): Tsp @storage[Long]       // is a specialized implementation of method copy$default$1
    def copy$default$1_J_n_J[T](val T_TypeTag: Byte,val T_TypeTag: Byte): Tsp @storage[Long] // is a specialized implementation of method copy$default$1
    def copy$default$1_n_J[T](val T_TypeTag: Byte): Tsp                    // is a forwarder to the specialized member
    def copy$default$2[T](): Tsp                                           // is a forwarder to the specialized member
    def copy$default$2_J[T](val T_TypeTag: Byte): Tsp @storage[Long]       // is a specialized implementation of method copy$default$2
    def copy$default$2_J_n_J[T](val T_TypeTag: Byte,val T_TypeTag: Byte): Tsp @storage[Long] // is a specialized implementation of method copy$default$2
    def copy$default$2_n_J[T](val T_TypeTag: Byte): Tsp                    // is a forwarder to the specialized member
    def copy[T](t1: T,t2: T): miniboxing.tests.compile.Complex[T]          // is a specialized implementation of method copy
    def copy_n_J[T](val T_TypeTag: Byte,t1: T @storage[Long],t2: T @storage[Long]): miniboxing.tests.compile.Complex[T] // is a specialized implementation of method copy
    def productArity(): Int                                                // is a specialized implementation of method productArity
    def productElement(x$1: Int): Any                                      // is a specialized implementation of method productElement
    override def equals(x$1: Any): Boolean                                 // is a specialized implementation of method equals
    override def hashCode(): Int                                           // is a specialized implementation of method hashCode
    override def productIterator(): Iterator[Any]                          // is a specialized implementation of method productIterator
    override def productPrefix(): String                                   // is a specialized implementation of method productPrefix
    override def toString(): String                                        // is a specialized implementation of method toString
    private[this] val miniboxing|tests|compile|Complex_J|T_TypeTag: Byte   // is a type tag
    private[this] val t1: Tsp @storage[Long]                               // is a specialized implementation of value t1
    private[this] val t2: Tsp @storage[Long]                               // is a specialized implementation of value t2
    val t1(): Tsp                                                          // is a forwarder to the specialized member
    val t1_J(val T_TypeTag: Byte): Tsp @storage[Long]                      // is a setter or getter for value t1
    val t2(): Tsp                                                          // is a forwarder to the specialized member
    val t2_J(val T_TypeTag: Byte): Tsp @storage[Long]                      // is a setter or getter for value t2
  }
  // specialized class:
  case class Complex_L[Tsp] extends Product with Serializable with Complex[Tsp] {
    def <init>(t1: Tsp,t2: Tsp): miniboxing.tests.compile.Complex_L[Tsp]   // is a specialized implementation of constructor Complex
    def canEqual(x$1: Any): Boolean                                        // is a specialized implementation of method canEqual
    def copy$default$1[T](): Tsp                                           // is a specialized implementation of method copy$default$1
    def copy$default$1_J[T](val T_TypeTag: Byte): Tsp @storage[Long]       // is a forwarder to the specialized member
    def copy$default$1_J_n_J[T](val T_TypeTag: Byte,val T_TypeTag: Byte): Tsp @storage[Long] // is a forwarder to the specialized member
    def copy$default$1_n_J[T](val T_TypeTag: Byte): Tsp                    // is a specialized implementation of method copy$default$1
    def copy$default$2[T](): Tsp                                           // is a specialized implementation of method copy$default$2
    def copy$default$2_J[T](val T_TypeTag: Byte): Tsp @storage[Long]       // is a forwarder to the specialized member
    def copy$default$2_J_n_J[T](val T_TypeTag: Byte,val T_TypeTag: Byte): Tsp @storage[Long] // is a forwarder to the specialized member
    def copy$default$2_n_J[T](val T_TypeTag: Byte): Tsp                    // is a specialized implementation of method copy$default$2
    def copy[T](t1: T,t2: T): miniboxing.tests.compile.Complex[T]          // is a specialized implementation of method copy
    def copy_n_J[T](val T_TypeTag: Byte,t1: T @storage[Long],t2: T @storage[Long]): miniboxing.tests.compile.Complex[T] // is a specialized implementation of method copy
    def productArity(): Int                                                // is a specialized implementation of method productArity
    def productElement(x$1: Int): Any                                      // is a specialized implementation of method productElement
    override def equals(x$1: Any): Boolean                                 // is a specialized implementation of method equals
    override def hashCode(): Int                                           // is a specialized implementation of method hashCode
    override def productIterator(): Iterator[Any]                          // is a specialized implementation of method productIterator
    override def productPrefix(): String                                   // is a specialized implementation of method productPrefix
    override def toString(): String                                        // is a specialized implementation of method toString
    private[this] val t1: Tsp                                              // is a specialized implementation of value t1
    private[this] val t2: Tsp                                              // is a specialized implementation of value t2
    val t1(): Tsp                                                          // is a setter or getter for value t1
    val t1_J(val T_TypeTag: Byte): Tsp @storage[Long]                      // is a forwarder to the specialized member
    val t2(): Tsp                                                          // is a setter or getter for value t2
    val t2_J(val T_TypeTag: Byte): Tsp @storage[Long]                      // is a forwarder to the specialized member
  }
[Now checking: minibox-inject]
[Not checkable: minibox-coerce]
[Now checking: minibox-commit]