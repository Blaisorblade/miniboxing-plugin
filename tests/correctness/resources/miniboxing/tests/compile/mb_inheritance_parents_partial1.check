Specializing class F1...
  // interface:
  abstract trait F1[T, R] extends Object {
  }
  // specialized class:
  class F1$JJ[Tsp, Rsp] extends F1[Tsp,Rsp] {
    def <init>(val miniboxing|tests|compile|inheritance|F1$JJ|T$TypeTag: Byte,val miniboxing|tests|compile|inheritance|F1$JJ|R$TypeTag: Byte): miniboxing.tests.compile.inheritance.F1$JJ[Tsp,Rsp] // is a specialized implementation of constructor F1
    private[this] val miniboxing|tests|compile|inheritance|F1$JJ|R$TypeTag: Byte // is a type tag
    private[this] val miniboxing|tests|compile|inheritance|F1$JJ|T$TypeTag: Byte // is a type tag
  }
  // specialized class:
  class F1$LJ[Tsp, Rsp] extends F1[Tsp,Rsp] {
    def <init>(val miniboxing|tests|compile|inheritance|F1$LJ|R$TypeTag: Byte): miniboxing.tests.compile.inheritance.F1$LJ[Tsp,Rsp] // is a specialized implementation of constructor F1
    private[this] val miniboxing|tests|compile|inheritance|F1$LJ|R$TypeTag: Byte // is a type tag
  }
  // specialized class:
  class F1$JL[Tsp, Rsp] extends F1[Tsp,Rsp] {
    def <init>(val miniboxing|tests|compile|inheritance|F1$JL|T$TypeTag: Byte): miniboxing.tests.compile.inheritance.F1$JL[Tsp,Rsp] // is a specialized implementation of constructor F1
    private[this] val miniboxing|tests|compile|inheritance|F1$JL|T$TypeTag: Byte // is a type tag
  }
  // specialized class:
  class F1$LL[Tsp, Rsp] extends F1[Tsp,Rsp] {
    def <init>(): miniboxing.tests.compile.inheritance.F1$LL[Tsp,Rsp]      // is a specialized implementation of constructor F1
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
Miniboxing plugin warning: Optimizing `MbTuple` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbTuple`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.inheritance {
  abstract trait F1[@miniboxed T, @miniboxed R] extends Object;
  class F1$JJ[Tsp, Rsp] extends Object with miniboxing.tests.compile.inheritance.F1[Tsp,Rsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|inheritance|F1$JJ|R$TypeTag: Byte = _;
    <paramaccessor> private[this] val miniboxing|tests|compile|inheritance|F1$JJ|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|inheritance|F1$JJ|T$TypeTag: Byte, miniboxing|tests|compile|inheritance|F1$JJ|R$TypeTag: Byte): miniboxing.tests.compile.inheritance.F1$JJ[Tsp,Rsp] = {
      F1$JJ.super.<init>();
      ()
    }
  };
  class F1$JL[Tsp, Rsp] extends Object with miniboxing.tests.compile.inheritance.F1[Tsp,Rsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|inheritance|F1$JL|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|inheritance|F1$JL|T$TypeTag: Byte): miniboxing.tests.compile.inheritance.F1$JL[Tsp,Rsp] = {
      F1$JL.super.<init>();
      ()
    }
  };
  class F1$LJ[Tsp, Rsp] extends Object with miniboxing.tests.compile.inheritance.F1[Tsp,Rsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|inheritance|F1$LJ|R$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|inheritance|F1$LJ|R$TypeTag: Byte): miniboxing.tests.compile.inheritance.F1$LJ[Tsp,Rsp] = {
      F1$LJ.super.<init>();
      ()
    }
  };
  class F1$LL[Tsp, Rsp] extends Object with miniboxing.tests.compile.inheritance.F1[Tsp,Rsp] {
    def <init>(): miniboxing.tests.compile.inheritance.F1$LL[Tsp,Rsp] = {
      F1$LL.super.<init>();
      ()
    }
  };
  class Predicate[T] extends miniboxing.tests.compile.inheritance.F1$LJ[T,Int] {
    def <init>(): miniboxing.tests.compile.inheritance.Predicate[T] = {
      Predicate.super.<init>(5);
      ()
    }
  }
}
[Now checking: minibox-commit]