[[syntax trees at end of            minibox-bridge]] // newSource1.scala
package miniboxing.tests.compile.bug138 {
  abstract trait Mb[@miniboxed T] extends Object {
    class Fun1[R] extends Object {
      def <init>(): Mb.this.Fun1[R] = {
        Fun1.super.<init>();
        ()
      };
      def apply(t: T): R = scala.this.Predef.???()
    };
    def foo(t: T): Unit;
    def foo$D(T$TypeTag: Byte, t: T @storage[Double]): Unit;
    def foo$J(T$TypeTag: Byte, t: T @storage[Long]): Unit
  };
  class Mb$D[Tsp] extends Object with miniboxing.tests.compile.bug138.Mb[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|bug138|Mb$D|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|bug138|Mb$D|T$TypeTag: Byte): miniboxing.tests.compile.bug138.Mb$D[Tsp] = {
      Mb$D.super.<init>();
      ()
    };
    def foo(t: Tsp): Unit = Mb$D.this.foo$D(Mb$D.this.miniboxing|tests|compile|bug138|Mb$D|T$TypeTag, t);
    def foo$D(T$TypeTag: Byte, t: Tsp @storage[Double]): Unit = {
      def bar(): Unit = {
        class Fun2 extends Mb$D.this.Fun1[Tsp] {
          def <init>(): Fun2 = {
            Fun2.super.<init>();
            ()
          };
          override def apply(t: Tsp): Tsp = t
        };
        val f2: Fun2 = new Fun2();
        val f1: Mb$D.this.Fun1[Tsp] = f2;
        scala.this.Predef.println(f2.apply(t));
        scala.this.Predef.println(f1.apply(t))
      };
      bar()
    };
    def foo$J(T$TypeTag: Byte, t: Tsp @storage[Long]): Unit = Mb$D.this.foo$D(T$TypeTag, t)
  };
  class Mb$J[Tsp] extends Object with miniboxing.tests.compile.bug138.Mb[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|bug138|Mb$J|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|bug138|Mb$J|T$TypeTag: Byte): miniboxing.tests.compile.bug138.Mb$J[Tsp] = {
      Mb$J.super.<init>();
      ()
    };
    def foo(t: Tsp): Unit = Mb$J.this.foo$J(Mb$J.this.miniboxing|tests|compile|bug138|Mb$J|T$TypeTag, t);
    def foo$D(T$TypeTag: Byte, t: Tsp @storage[Double]): Unit = Mb$J.this.foo$J(T$TypeTag, t);
    def foo$J(T$TypeTag: Byte, t: Tsp @storage[Long]): Unit = {
      def bar(): Unit = {
        class Fun2 extends Mb$J.this.Fun1[Tsp] {
          def <init>(): Fun2 = {
            Fun2.super.<init>();
            ()
          };
          override def apply(t: Tsp): Tsp = t
        };
        val f2: Fun2 = new Fun2();
        val f1: Mb$J.this.Fun1[Tsp] = f2;
        scala.this.Predef.println(f2.apply(t));
        scala.this.Predef.println(f1.apply(t))
      };
      bar()
    }
  };
  class Mb$L[Tsp] extends Object with miniboxing.tests.compile.bug138.Mb[Tsp] {
    def <init>(): miniboxing.tests.compile.bug138.Mb$L[Tsp] = {
      Mb$L.super.<init>();
      ()
    };
    def foo(t: Tsp): Unit = {
      def bar(): Unit = {
        class Fun2 extends Mb$L.this.Fun1[Tsp] {
          def <init>(): Fun2 = {
            Fun2.super.<init>();
            ()
          };
          override def apply(t: Tsp): Tsp = t
        };
        val f2: Fun2 = new Fun2();
        val f1: Mb$L.this.Fun1[Tsp] = f2;
        scala.this.Predef.println(f2.apply(t));
        scala.this.Predef.println(f1.apply(t))
      };
      bar()
    };
    def foo$D(T$TypeTag: Byte, t: Tsp @storage[Double]): Unit = Mb$L.this.foo(t);
    def foo$J(T$TypeTag: Byte, t: Tsp @storage[Long]): Unit = Mb$L.this.foo(t)
  };
  object Test extends Object {
    def <init>(): miniboxing.tests.compile.bug138.Test.type = {
      Test.super.<init>();
      ()
    };
    def main(args: Array[String]): Unit = {
      new miniboxing.tests.compile.bug138.Mb$J[Int](5).foo$J(5, 4);
      new miniboxing.tests.compile.bug138.Mb$L[String]().foo("x");
      new miniboxing.tests.compile.bug138.Mb$D[Double](8).foo$D(8, 3.0)
    }
  }
}
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.bug138 {
  abstract trait Mb[@miniboxed T] extends Object {
    class Fun1[R] extends Object {
      def <init>(): Mb.this.Fun1[R] = {
        Fun1.super.<init>();
        ()
      };
      def apply(t: T): R = scala.this.Predef.???()
    };
    def foo(t: T): Unit;
    def foo$D(T$TypeTag: Byte, t: Double): Unit;
    def foo$J(T$TypeTag: Byte, t: Long): Unit
  };
  class Mb$D[Tsp] extends Object with miniboxing.tests.compile.bug138.Mb[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|bug138|Mb$D|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|bug138|Mb$D|T$TypeTag: Byte): miniboxing.tests.compile.bug138.Mb$D[Tsp] = {
      Mb$D.super.<init>();
      ()
    };
    def foo(t: Tsp): Unit = Mb$D.this.foo$D(Mb$D.this.miniboxing|tests|compile|bug138|Mb$D|T$TypeTag, MiniboxConversionsDouble.this.box2minibox_tt[Tsp](t, Mb$D.this.miniboxing|tests|compile|bug138|Mb$D|T$TypeTag));
    def foo$D(T$TypeTag: Byte, t: Double): Unit = {
      def bar(): Unit = {
        class Fun2 extends Mb$D.this.Fun1[Tsp] {
          def <init>(): Fun2 = {
            Fun2.super.<init>();
            ()
          };
          override def apply(t: Tsp): Tsp = t
        };
        val f2: Fun2 = new Fun2();
        val f1: Mb$D.this.Fun1[Tsp] = f2;
        scala.this.Predef.println(f2.apply(MiniboxConversionsDouble.this.minibox2box[Tsp](t, T$TypeTag)));
        scala.this.Predef.println(f1.apply(MiniboxConversionsDouble.this.minibox2box[Tsp](t, T$TypeTag)))
      };
      bar()
    };
    def foo$J(T$TypeTag: Byte, t: Long): Unit = Mb$D.this.foo$D(T$TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Long", "Double"))
  };
  class Mb$J[Tsp] extends Object with miniboxing.tests.compile.bug138.Mb[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|bug138|Mb$J|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|bug138|Mb$J|T$TypeTag: Byte): miniboxing.tests.compile.bug138.Mb$J[Tsp] = {
      Mb$J.super.<init>();
      ()
    };
    def foo(t: Tsp): Unit = Mb$J.this.foo$J(Mb$J.this.miniboxing|tests|compile|bug138|Mb$J|T$TypeTag, MiniboxConversionsLong.this.box2minibox_tt[Tsp](t, Mb$J.this.miniboxing|tests|compile|bug138|Mb$J|T$TypeTag));
    def foo$D(T$TypeTag: Byte, t: Double): Unit = Mb$J.this.foo$J(T$TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Double", "Long"));
    def foo$J(T$TypeTag: Byte, t: Long): Unit = {
      def bar(): Unit = {
        class Fun2 extends Mb$J.this.Fun1[Tsp] {
          def <init>(): Fun2 = {
            Fun2.super.<init>();
            ()
          };
          override def apply(t: Tsp): Tsp = t
        };
        val f2: Fun2 = new Fun2();
        val f1: Mb$J.this.Fun1[Tsp] = f2;
        scala.this.Predef.println(f2.apply(MiniboxConversionsLong.this.minibox2box[Tsp](t, T$TypeTag)));
        scala.this.Predef.println(f1.apply(MiniboxConversionsLong.this.minibox2box[Tsp](t, T$TypeTag)))
      };
      bar()
    }
  };
  class Mb$L[Tsp] extends Object with miniboxing.tests.compile.bug138.Mb[Tsp] {
    def <init>(): miniboxing.tests.compile.bug138.Mb$L[Tsp] = {
      Mb$L.super.<init>();
      ()
    };
    def foo(t: Tsp): Unit = {
      def bar(): Unit = {
        class Fun2 extends Mb$L.this.Fun1[Tsp] {
          def <init>(): Fun2 = {
            Fun2.super.<init>();
            ()
          };
          override def apply(t: Tsp): Tsp = t
        };
        val f2: Fun2 = new Fun2();
        val f1: Mb$L.this.Fun1[Tsp] = f2;
        scala.this.Predef.println(f2.apply(t));
        scala.this.Predef.println(f1.apply(t))
      };
      bar()
    };
    def foo$D(T$TypeTag: Byte, t: Double): Unit = Mb$L.this.foo(MiniboxConversionsDouble.this.minibox2box[Tsp](t, T$TypeTag));
    def foo$J(T$TypeTag: Byte, t: Long): Unit = Mb$L.this.foo(MiniboxConversionsLong.this.minibox2box[Tsp](t, T$TypeTag))
  };
  object Test extends Object {
    def <init>(): miniboxing.tests.compile.bug138.Test.type = {
      Test.super.<init>();
      ()
    };
    def main(args: Array[String]): Unit = {
      new miniboxing.tests.compile.bug138.Mb$J[Int](5).foo$J(5, MiniboxConversions.this.int2minibox(4));
      new miniboxing.tests.compile.bug138.Mb$L[String]().foo("x");
      new miniboxing.tests.compile.bug138.Mb$D[Double](8).foo$D(8, MiniboxConversionsDouble.this.double2minibox(3.0))
    }
  }
}
4
4
x
x
3.0
3.0